{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # PDM is a modern Python package manager with PEP 582 support. It installs and manages packages in a similar way to npm that doesn't need to create a virtualenv at all! Feature highlights # PEP 582 local package installer and runner, no virtualenv involved at all. Simple and relatively fast dependency resolver, mainly for large binary distributions. A PEP 517 build backend. PEP 621 project metadata. Installation # PDM requires Python 3.7+ to be installed. It works on multiple platforms including Windows, Linux and MacOS. Note There is no restriction about what Python version your project is using, but installing PDM itself needs Python 3.7+. Recommended installation method # If your are on MacOS and using homebrew , install it by: 1 $ brew install pdm Otherwise, to avoid messing up with the system Python environment, the most recommended way to install PDM is via pipx : 1 $ pipx install pdm Other installation methods # Install PDM into user site with pip : 1 $ pip install --user pdm Enable PEP 582 globally # To make the Python interpreters aware of PEP 582 packages, one need to add the pdm/pep582/sitecustomize.py to the Python library search path. For Windows users # One just needs to execute pdm --pep582 , then environment variable will be changed automatically. Don't forget to restart the terminal session to take effect. For Mac and Linux users # The command to change the environment variables can be produced by pdm --pep582 [<SHELL>] . If <SHELL> isn't given, PDM will pick one based on some guesses. You may want to write a line in your .bash_profile (or similar profiles) to make it effective when login. For example, in bash you can do this: 1 $ pdm --pep582 >> ~/.bash_profile Once again, Don't forget to restart the terminal session to take effect. This setup may become the default in the future. Use the docker image # PDM also provides a docker image to ease your deployment flow, to use it, write a Dockerfile with following content: 1 2 3 4 5 6 FROM frostming/pdm COPY . /app # -- Replace with the correct path to your app's main executable CMD [ \"pdm\" , \"run\" , \"python\" , \"main.py\" ] Shell Completion # PDM supports generating completion scripts for Bash, Zsh, Fish or Powershell. Here are some common locations for each shell: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # Bash $ pdm completion bash > /etc/bash_completion.d/pdm.bash-completion # Zsh # Make sure ~/.zfunc is added to fpath, before compinit. $ pdm completion zsh > ~/.zfunc/_pdm # Oh-My-Zsh $ mkdir $ZSH_CUSTOM /plugins/pdm $ pdm completion zsh > $ZSH_CUSTOM /plugins/pdm/_pdm # Then make sure pdm plugin is enabled in ~/.zshrc # Fish $ pdm completion fish > ~/.config/fish/completions/pdm.fish # Powershell # Create a directory to store completion scripts PS > mkdir $PROFILE \\. . \\C ompletions PS > echo @ ' Get-ChildItem \"$PROFILE\\..\\Completions\\\" | ForEach-Object { . $_.FullName } ' @ | Out-File -Append -Encoding utf8 $PROFILE # Generate script PS > Set-ExecutionPolicy Unrestricted -Scope CurrentUser PS > pdm completion powershell | Out-File -Encoding utf8 $PROFILE \\. . \\C ompletions \\p dm_completion.ps1 Unicode and ANSI supports # PDM provides a fancy terminal UI with the help of ANSI characters and unicode emojis. It can turn on/off automatically depending on whether it is supported on your terminal. However, if you see any garbled characters, set env var DISABLE_UNICODE_OUTPUT=1 to turn off it. Use with IDE # Now there are not built-in support or plugins for PEP 582 in most IDEs, you have to configure your tools manually. PDM will write and store project-wide configurations in .pdm.toml and you are recommended to add following lines in the .gitignore : 1 2 .pdm.toml __pypackages__/ PyCharm # Mark __pypackages__/<major.minor>/lib as Sources Root. Additionally, if you want to use tools from the environment (e.g. pytest ), you have to add the __pypackages__/<major.minor>/bin directory to the PATH variable in the corresponding run/debug configuration. VSCode # Add following in the settings.json : 1 2 3 4 5 { ... \"python.autoComplete.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ], \"python.analysis.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ] } Task Provider # In addition, there is a VSCode Task Provider extension available for download. This makes it possible for VSCode to automatically detect pdm scripts so they can be run natively as VSCode Tasks .","title":"Home"},{"location":"#introduction","text":"PDM is a modern Python package manager with PEP 582 support. It installs and manages packages in a similar way to npm that doesn't need to create a virtualenv at all!","title":"Introduction"},{"location":"#feature-highlights","text":"PEP 582 local package installer and runner, no virtualenv involved at all. Simple and relatively fast dependency resolver, mainly for large binary distributions. A PEP 517 build backend. PEP 621 project metadata.","title":"Feature highlights"},{"location":"#installation","text":"PDM requires Python 3.7+ to be installed. It works on multiple platforms including Windows, Linux and MacOS. Note There is no restriction about what Python version your project is using, but installing PDM itself needs Python 3.7+.","title":"Installation"},{"location":"#recommended-installation-method","text":"If your are on MacOS and using homebrew , install it by: 1 $ brew install pdm Otherwise, to avoid messing up with the system Python environment, the most recommended way to install PDM is via pipx : 1 $ pipx install pdm","title":"Recommended installation method"},{"location":"#other-installation-methods","text":"Install PDM into user site with pip : 1 $ pip install --user pdm","title":"Other installation methods"},{"location":"#enable-pep-582-globally","text":"To make the Python interpreters aware of PEP 582 packages, one need to add the pdm/pep582/sitecustomize.py to the Python library search path.","title":"Enable PEP 582 globally"},{"location":"#for-windows-users","text":"One just needs to execute pdm --pep582 , then environment variable will be changed automatically. Don't forget to restart the terminal session to take effect.","title":"For Windows users"},{"location":"#for-mac-and-linux-users","text":"The command to change the environment variables can be produced by pdm --pep582 [<SHELL>] . If <SHELL> isn't given, PDM will pick one based on some guesses. You may want to write a line in your .bash_profile (or similar profiles) to make it effective when login. For example, in bash you can do this: 1 $ pdm --pep582 >> ~/.bash_profile Once again, Don't forget to restart the terminal session to take effect. This setup may become the default in the future.","title":"For Mac and Linux users"},{"location":"#use-the-docker-image","text":"PDM also provides a docker image to ease your deployment flow, to use it, write a Dockerfile with following content: 1 2 3 4 5 6 FROM frostming/pdm COPY . /app # -- Replace with the correct path to your app's main executable CMD [ \"pdm\" , \"run\" , \"python\" , \"main.py\" ]","title":"Use the docker image"},{"location":"#shell-completion","text":"PDM supports generating completion scripts for Bash, Zsh, Fish or Powershell. Here are some common locations for each shell: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # Bash $ pdm completion bash > /etc/bash_completion.d/pdm.bash-completion # Zsh # Make sure ~/.zfunc is added to fpath, before compinit. $ pdm completion zsh > ~/.zfunc/_pdm # Oh-My-Zsh $ mkdir $ZSH_CUSTOM /plugins/pdm $ pdm completion zsh > $ZSH_CUSTOM /plugins/pdm/_pdm # Then make sure pdm plugin is enabled in ~/.zshrc # Fish $ pdm completion fish > ~/.config/fish/completions/pdm.fish # Powershell # Create a directory to store completion scripts PS > mkdir $PROFILE \\. . \\C ompletions PS > echo @ ' Get-ChildItem \"$PROFILE\\..\\Completions\\\" | ForEach-Object { . $_.FullName } ' @ | Out-File -Append -Encoding utf8 $PROFILE # Generate script PS > Set-ExecutionPolicy Unrestricted -Scope CurrentUser PS > pdm completion powershell | Out-File -Encoding utf8 $PROFILE \\. . \\C ompletions \\p dm_completion.ps1","title":"Shell Completion"},{"location":"#unicode-and-ansi-supports","text":"PDM provides a fancy terminal UI with the help of ANSI characters and unicode emojis. It can turn on/off automatically depending on whether it is supported on your terminal. However, if you see any garbled characters, set env var DISABLE_UNICODE_OUTPUT=1 to turn off it.","title":"Unicode and ANSI supports"},{"location":"#use-with-ide","text":"Now there are not built-in support or plugins for PEP 582 in most IDEs, you have to configure your tools manually. PDM will write and store project-wide configurations in .pdm.toml and you are recommended to add following lines in the .gitignore : 1 2 .pdm.toml __pypackages__/","title":"Use with IDE"},{"location":"#pycharm","text":"Mark __pypackages__/<major.minor>/lib as Sources Root. Additionally, if you want to use tools from the environment (e.g. pytest ), you have to add the __pypackages__/<major.minor>/bin directory to the PATH variable in the corresponding run/debug configuration.","title":"PyCharm"},{"location":"#vscode","text":"Add following in the settings.json : 1 2 3 4 5 { ... \"python.autoComplete.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ], \"python.analysis.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ] }","title":"VSCode"},{"location":"#task-provider","text":"In addition, there is a VSCode Task Provider extension available for download. This makes it possible for VSCode to automatically detect pdm scripts so they can be run natively as VSCode Tasks .","title":"Task Provider"},{"location":"advanced/","text":"Advanced Usage # Automatic Testing with Tox # Tox is a great tool for testing against multiple Python versions or dependency sets. You can configure a tox.ini like the following to integrate your testing with PDM: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [tox] env_list = py{36,37,38},lint isolated_build = true passenv = PDM_IGNORE_SAVED_PYTHON=1 [testenv] deps = pdm commands = pdm install --dev pytest tests [testenv:lint] deps = pdm commands = pdm install -s lint flake8 src/ To use the virtualenv created by Tox, you should make sure you have set pdm config use_venv true . PDM then will install dependencies from pdm.lock into the virtualenv. In the dedicated venv you can directly run tools by pytest tests/ instead of pdm run pytest tests/ . You should also make sure you don't run pdm add/pdm remove/pdm update/pdm lock in the test commands, otherwise the pdm.lock file will be modified unexpectedly. Additional dependencies can be supplied with the deps config. Besides, isolated_buid and passenv config should be set as the above example to make PDM work properly. To get rid of these constraints, there is a Tox plugin tox-pdm which can ease the usage. You can install it by 1 $ pip install tox-pdm Or, 1 $ pdm add --dev tox-pdm And you can make the tox.ini much tidier as following, : 1 2 3 4 5 6 7 8 9 10 11 12 [tox] env_list = py{36,37,38},lint [testenv] sections = dev commands = pytest tests [testenv:lint] sections = lint commands = flake8 src/ See the project's README for a detailed guidance. Automatic Testing with Nox # Nox is another great tool for automated testing. Unlike tox, Nox uses a standard Python file for configuration. It is much easier to use PDM in Nox, here is an example of noxfile.py : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import os import nox os . environ . update ({ \"PDM_IGNORE_SAVED_PYTHON\" : \"1\" }) @nox . session def tests ( session ): session . run ( 'pdm' , 'install' , '-s' , 'test' , external = True ) session . run ( 'pytest' ) @nox . session def lint ( session ): session . run ( 'pdm' , 'install' , '-s' , 'lint' , external = True ) session . run ( 'flake8' , '--import-order-style' , 'google' ) Note that PDM_IGNORE_SAVED_PYTHON should be set so that PDM can pick up the Python in the virtualenv correctly. Also make sure pdm is available in the PATH . Before running nox, you should also pdm config use_venv true to enable venv reusing. Use PDM in Continuous Integration # Only one thing to keep in mind -- PDM can't be installed on Python < 3.7, so if your project is to be tested on those Python versions, you have to make sure PDM is installed on the correct Python version, which can be different from the target Python version the particular job/task is run on. Fortunately, if you are using GitHub Action, there is pdm-project/setup-pdm to make this process easier. Here is an example worflow of GitHub Actions, while you can adapt it for other CI platforms. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Testing : runs-on : ${{ matrix.os }} strategy : matrix : python-version : [ 3.6 , 3.7 , 3.8 , 3.9 ] os : [ ubuntu-latest , macOS-latest , windows-latest ] steps : - uses : actions/checkout@v1 - name : Set up PDM uses : pdm-project/setup-pdm@v1.1 with : python-version : ${{ matrix.python-version }} - name : Install dependencies run : | pdm sync -d -s testing - name : Run Tests run : | pdm run -v pytest tests TIPS For GitHub Action users, there is a known compatibility issue on Ubuntu virtual environment. If PDM parallel install is failed on that machine you should either set parallel_install to false or set env LD_PRELOAD=/lib/x86_64-linux-gnu/libgcc_s.so.1 . It is already handled by the pdm-project/setup-pdm action.","title":"Advanced Usage"},{"location":"advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"advanced/#automatic-testing-with-tox","text":"Tox is a great tool for testing against multiple Python versions or dependency sets. You can configure a tox.ini like the following to integrate your testing with PDM: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [tox] env_list = py{36,37,38},lint isolated_build = true passenv = PDM_IGNORE_SAVED_PYTHON=1 [testenv] deps = pdm commands = pdm install --dev pytest tests [testenv:lint] deps = pdm commands = pdm install -s lint flake8 src/ To use the virtualenv created by Tox, you should make sure you have set pdm config use_venv true . PDM then will install dependencies from pdm.lock into the virtualenv. In the dedicated venv you can directly run tools by pytest tests/ instead of pdm run pytest tests/ . You should also make sure you don't run pdm add/pdm remove/pdm update/pdm lock in the test commands, otherwise the pdm.lock file will be modified unexpectedly. Additional dependencies can be supplied with the deps config. Besides, isolated_buid and passenv config should be set as the above example to make PDM work properly. To get rid of these constraints, there is a Tox plugin tox-pdm which can ease the usage. You can install it by 1 $ pip install tox-pdm Or, 1 $ pdm add --dev tox-pdm And you can make the tox.ini much tidier as following, : 1 2 3 4 5 6 7 8 9 10 11 12 [tox] env_list = py{36,37,38},lint [testenv] sections = dev commands = pytest tests [testenv:lint] sections = lint commands = flake8 src/ See the project's README for a detailed guidance.","title":"Automatic Testing with Tox"},{"location":"advanced/#automatic-testing-with-nox","text":"Nox is another great tool for automated testing. Unlike tox, Nox uses a standard Python file for configuration. It is much easier to use PDM in Nox, here is an example of noxfile.py : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import os import nox os . environ . update ({ \"PDM_IGNORE_SAVED_PYTHON\" : \"1\" }) @nox . session def tests ( session ): session . run ( 'pdm' , 'install' , '-s' , 'test' , external = True ) session . run ( 'pytest' ) @nox . session def lint ( session ): session . run ( 'pdm' , 'install' , '-s' , 'lint' , external = True ) session . run ( 'flake8' , '--import-order-style' , 'google' ) Note that PDM_IGNORE_SAVED_PYTHON should be set so that PDM can pick up the Python in the virtualenv correctly. Also make sure pdm is available in the PATH . Before running nox, you should also pdm config use_venv true to enable venv reusing.","title":"Automatic Testing with Nox"},{"location":"advanced/#use-pdm-in-continuous-integration","text":"Only one thing to keep in mind -- PDM can't be installed on Python < 3.7, so if your project is to be tested on those Python versions, you have to make sure PDM is installed on the correct Python version, which can be different from the target Python version the particular job/task is run on. Fortunately, if you are using GitHub Action, there is pdm-project/setup-pdm to make this process easier. Here is an example worflow of GitHub Actions, while you can adapt it for other CI platforms. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Testing : runs-on : ${{ matrix.os }} strategy : matrix : python-version : [ 3.6 , 3.7 , 3.8 , 3.9 ] os : [ ubuntu-latest , macOS-latest , windows-latest ] steps : - uses : actions/checkout@v1 - name : Set up PDM uses : pdm-project/setup-pdm@v1.1 with : python-version : ${{ matrix.python-version }} - name : Install dependencies run : | pdm sync -d -s testing - name : Run Tests run : | pdm run -v pytest tests TIPS For GitHub Action users, there is a known compatibility issue on Ubuntu virtual environment. If PDM parallel install is failed on that machine you should either set parallel_install to false or set env LD_PRELOAD=/lib/x86_64-linux-gnu/libgcc_s.so.1 . It is already handled by the pdm-project/setup-pdm action.","title":"Use PDM in Continuous Integration"},{"location":"changelog/","text":"Change Log # Release v1.4.2 (2021-03-18) # Features & Improvements # Refactor the code, extract the version related logic from specifiers.py to a separated module. #303 Bug Fixes # Fix a bug that get_dependencies() returns error when the setup.py has no intall_requires key. #299 Pin the VCS revision for non-editable VCS candidates in the lock file. #305 Fix a bug that editable build hits the cached wheel unexpectedly. #307 Miscellany # replace 'typing comments' with type annotations throughout #298 Release v1.4.1 (2021-03-12) # Features & Improvements # Support importing dependencies from requirements.txt to dev-dependencies or sections. #291 Bug Fixes # Fallback to static parsing when building was failed to find the dependencies of a candidate. #293 Fix a bug that pdm init fails when pyproject.toml exists but has no [project] section. #295 Improved Documentation # Document about how to use PDM with Nox. #281 Release v1.4.0 (2021-03-05) # Features & Improvements # When -I/--ignore-python passed or PDM_IGNORE_SAVED_PYTHON=1 , ignore the interpreter set in .pdm.toml and don't save to it afterwards. #283 A new option -p/--project is introduced to specify another path for the project base. It can also be combined with -g/--global option. The latter is changed to a flag only option that does not accept values. #286 Support -f setuppy for pdm export to export the metadata as setup.py #289 Bug Fixes # Fix a bug that editable local package requirements cannot be parsed rightly. #285 Change the priority of metadata files to parse so that PEP 621 metadata will be parsed first. #288 Improved Documentation # Add examples of how to integrate with CI pipelines (and tox). #281 Release v1.3.4 (2021-03-01) # Improved Documentation # added documentation on a task provider for vscode #280 Bug Fixes # Ignore the python requires constraints when fetching the link from the PyPI index. Release v1.3.3 (2021-02-26) # Bug Fixes # Fix the requirement string of a VCS requirement to comply with PEP 508. #275 Fix a bug that editable packages with src directory can't be uninstalled correctly. #277 Fix a bug that editable package doesn't override the non-editable version in the working set. #278 Release v1.3.2 (2021-02-25) # Features & Improvements # Abort and tell user the selected section following pdm sync or pdm install is not present in the error message. #274 Bug Fixes # Fix a bug that candidates' sections cannot be retrieved rightly when circular dependencies exist. #270 Don't pass the help argument into the run script method. #272 Release v1.3.1 (2021-02-19) # Bug Fixes # Use the absolute path when importing from a Poetry pyproject.toml. #262 Fix a bug that old toml table head is kept when converting to PEP 621 metadata format. #263 Postpone the evaluation of requires-python attribute when fetching the candidates of a package. #264 Release v1.3.0 (2021-02-09) # Features & Improvements # Increase the default value of the max rounds of resolution to 1000, make it configurable. #238 Rewrite the project's egg-info directory when dependencies change. So that pdm list --graph won't show invalid entries. #240 When importing requirments from a requirments.txt file, build the package to find the name if not given in the URL. #245 When initializing the project, prompt user for whether the project is a library, and give empty name and version if not. #253 Bug Fixes # Fix the version validator of wheel metadata to align with the implementation of packaging . #130 Preserve the sections value of a pinned candidate to be reused. #234 Strip spaces in user input when prompting for the python version to use. #252 Fix the version parsing of Python requires to allow > , >= , < , <= to combine with star versions. #254 Release v1.2.0 (2021-01-26) # Features & Improvements # Change the behavior of --save-compatible slightly. Now the version specifier saved is using the REAL compatible operator ~= as described in PEP 440. Before: requests<3.0.0,>=2.19.1 , After: requests~=2.19 . The new specifier accepts requests==2.19.0 as compatible version. #225 Environment variable ${PROJECT_ROOT} in the dependency specification can be expanded to refer to the project root in pyproject.toml. The environment variables will be kept as they are in the lock file. #226 Change the dependencies of a package in the lock file to a list of PEP 508 strings #236 Bug Fixes # Ignore user's site and PYTHONPATH (with python -I mode) when executing pip commands. #231 Improved Documentation # Document about how to activate and use a plugin. #227 Dependencies # Test project on pip 21.0 . #235 Release v1.1.0 (2021-01-18) # Features & Improvements # Allow users to hide secrets from the pyproject.toml . Dynamically expand env variables in the URLs in dependencies and indexes. Ask whether to store the credentials provided by the user. A user-friendly error will show when credentials are not provided nor correct. #198 Use a different package dir for 32-bit installation(Windows). #212 Auto disable PEP 582 when a venv-like python is given as the interpreter path. #219 Support specifying Python interpreter by pdm use <path-to-python-root> . #221 Bug Fixes # Fix a bug of PYTHONPATH manipulation under Windows platform. #215 Removals and Deprecations # Remove support of the old PEP 517 backend API path. #217 Release v1.0.0 (2021-01-05) # Bug Fixes # Correctly build wheels for dependencies with build-requirements but without a specified build-backend #213 Release v1.0.0b2 (2020-12-29) # Features & Improvements # Fallback to pypi.org when /search endpoint is not available on given index. #211 Bug Fixes # Fix a bug that PDM fails to parse python version specifiers with more than 3 parts. #210 Release v1.0.0b0 (2020-12-24) # Features & Improvements # Fully support of PEP 621 specification. Old format is deprecated at the same time. PDM will migrate the project file for you when old format is detected. Other metadata formats( Poetry , Pipfile , flit ) can also be imported as PEP 621 metadata. #175 Re-implement the pdm search to query the /search HTTP endpoint. #195 Reuse the cached built wheels to accelerate the installation. #200 Make update strategy and save strategy configurable in pdm config. #202 Improve the error message to give more insight on what to do when resolution fails. #207 Set classifiers dynamic in pyproject.toml template for autogeneration. #209 Bug Fixes # Fix a bug that distributions are not removed clearly in parallel mode. #204 Fix a bug that python specifier is_subset() returns incorrect result. #206 Release v0.12.3 (2020-12-21) # Dependencies # Pin pdm-pep517 to <0.3.0 , this is the last version to support legacy project metadata format. Release v0.12.2 (2020-12-17) # Features & Improvements # Update the lock file schema, move the file hashes to [metadata.files] table. #196 Retry failed jobs when syncing packages. #197 Removals and Deprecations # Drop pip-shims package as a dependency. #132 Miscellany # Fix the cache path for CI. #199 Release v0.12.1 (2020-12-14) # Features & Improvements # Provide an option to export requirements from pyproject.toml #190 For Windows users, pdm --pep582 can enable PEP 582 globally by manipulating the WinReg. #191 Bug Fixes # Inject __pypackages__ into PATH env var during pdm run . #193 Release v0.12.0 (2020-12-08) # Features & Improvements # Improve the user experience of pdm run : Add a special key in tool.pdm.scripts that holds configurations shared by all scripts. Support loading env var from a dot-env file. Add a flag -s/--site-packages to include system site-packages when running. #178 Now PEP 582 can be enabled in the Python interpreter directly! #181 Bug Fixes # Ensure setuptools is installed before invoking editable install script. #174 Require wheel not wheels for global projects #182 Write a sitecustomize.py instead of a .pth file to enable PEP 582. Thanks @Aloxaf. Update get_package_finder() to be compatible with pip 20.3 . #185 Fix the help messages of commands \"cache\" and \"remove\" #187 Release v0.11.0 (2020-11-20) # Features & Improvements # Support custom script shortcuts in pyproject.toml . Support custom script shortcuts defined in [tool.pdm.scripts] section. Add pdm run --list/-l to show the list of script shortcuts. #168 Patch the halo library to support parallel spinners. Change the looking of pdm install . #169 Bug Fixes # Fix a bug that package's marker fails to propagate to its grandchildren if they have already been resolved. #170 Fix a bug that bare version specifiers in Poetry project can't be converted correctly. #172 Fix the build error that destination directory is not created automatically. #173 Release v0.10.2 (2020-11-05) # Bug Fixes # Building editable distribution does not install build-system.requires anymore. #167 Release v0.10.1 (2020-11-04) # Bug Fixes # Switch the PEP 517 build frontend from build to a home-grown version. #162 Synchronize the output of LogWrapper . #164 Fix a bug that is_subset and is_superset may return wrong result when wildcard excludes overlaps with the upper bound. #165 Release v0.10.0 (2020-10-20) # Features & Improvements # Change to Git style config command. #157 Add a command to generate scripts for autocompletion, which is backed by pycomplete . #159 Bug Fixes # Fix a bug that sitecustomize.py incorrectly gets injected into the editable console scripts. #158 Release v0.9.2 (2020-10-13) # Features & Improvements # Cache the built wheels to accelerate resolution and installation process. #153 Bug Fixes # Fix a bug that no wheel is matched when finding candidates to install. #155 Fix a bug that installation in parallel will cause encoding initialization error on Ubuntu. #156 Release v0.9.1 (2020-10-13) # Features & Improvements # Display plain text instead of spinner bar under verbose mode. #150 Bug Fixes # Fix a bug that the result of find_matched() is exhausted when accessed twice. #149 Release v0.9.0 (2020-10-08) # Features & Improvements # Allow users to combine several dependency sections to form an extra require. #131 Split the PEP 517 backend to its own(battery included) package. #134 Add a new option to list command to show reverse dependency graph. #137 Bug Fixes # Fix a bug that spaces in path causes requirement parsing error. #138 Fix a bug that requirement's python constraint is not respected when resolving. #141 Dependencies # Update pdm-pep517 to 0.2.0 that supports reading version from SCM. #146 Miscellany # Add Python 3.9 to the CI version matrix to verify. #144 Release v0.8.7 (2020-09-04) # Bug Fixes # Fix a compatibility issue with wheel==0.35 . #135 Release v0.8.6 (2020-07-09) # Bug Fixes # Fix a bug that extra sources are not respected when fetching distributions. #127 Release v0.8.5 (2020-06-24) # Bug Fixes # Fix a bug that pdm export fails when the project doesn't have name property. #126 Dependencies # Upgrade dependency pip to 20.1 . #125 Release v0.8.4 (2020-05-21) # Features & Improvements # Add a new command export to export to alternative formats. #117 Miscellany # Add Dockerfile and pushed to Docker Hub. #122 Release v0.8.3 (2020-05-15) # Bug Fixes # Fix the version constraint parsing of wheel metadata. #120 Release v0.8.2 (2020-05-03) # Bug Fixes # Update resolvers to resolvelib 0.4.0. #118 Release v0.8.1 (2020-04-22) # Dependencies # Switch to upstream resolvelib 0.3.0 . #116 Release v0.8.0 (2020-04-20) # Features & Improvements # Add a new command to search for packages #111 Add show command to show package metadata. #114 Bug Fixes # Fix a bug that environment markers cannot be evaluated correctly if extras are connected with \"or\". #107 Don't consult PyPI JSON API by default for package metadata. #112 Eliminate backslashes in markers for TOML documents. #115 Release v0.7.1 (2020-04-13) # Bug Fixes # Editable packages requires setuptools to be installed in the isolated environment. Release v0.7.0 (2020-04-12) # Features & Improvements # Disable loading of site-packages under PEP 582 mode. #100 Bug Fixes # Fix a bug that TOML parsing error is not correctly captured. #101 Fix a bug of building wheels with C extensions that the platform in file name is incorrect. #99 Release v0.6.5 (2020-04-07) # Bug Fixes # Unix style executable script suffix is missing. Release v0.6.4 (2020-04-07) # Features & Improvements # Update shebang lines in the executable scripts when doing pdm use . #96 Auto-detect commonly used venv directories. #97 Release v0.6.3 (2020-03-30) # Bug Fixes # Fix a bug of moving files across different file system. #95 Release v0.6.2 (2020-03-29) # Bug Fixes # Validate user input for python_requires when initializing project. #89 Ensure wheel package is available before building packages. #90 Fix an issue of remove command that will unexpectedly uninstall packages in default section. #92 Dependencies # Update dependencies pythonfinder , python-cfonts , pip-shims and many others. Drop dependency vistir . #89 Release v0.6.1 (2020-03-25) # Features & Improvements # Redirect output messages to log file for installation and locking. #84 Bug Fixes # Fix a bug that parallel installation fails due to setuptools reinstalling. #83 Release v0.6.0 (2020-03-20) # Features & Improvements # Support specifying build script for C extensions. #23 Add test cases for pdm build . #81 Make it configurable whether to consult PyPI JSON API since it may be not trustable. Support parallel installation. Add new command pmd import to import project metadata from Pipfile , poetry , flit , requirements.txt . #79 pdm init and pdm install will auto-detect possible files that can be imported. Bug Fixes # Fix wheel builds when package_dir is mapped. #81 pdm init will use the current directory rather than finding the parents when global project is not activated. Release v0.5.0 (2020-03-14) # Features & Improvements # Introduce a super easy-to-extend plug-in system to PDM. #75 Improved Documentation # Documentation on how to write a plugin. #75 Bug Fixes # Fix a typo in metadata parsing from plugins to entry_points Release v0.4.2 (2020-03-13) # Features & Improvements # Refactor the CLI part, switch from click to argparse , for better extensibility. #73 Allow users to configure to install packages into venv when it is activated. #74 Release v0.4.1 (2020-03-11) # Features & Improvements # Add a minimal dependency set for global project. #72 Release v0.4.0 (2020-03-10) # Features & Improvements # Global project support Add a new option -g/--global to manage global project. The default location is at ~/.pdm/global-project . Use the virtualenv interpreter when detected inside an activated venv. Add a new option -p/--project to select project root other than the default one. #30 Add a new command pdm config del to delete an existing config item. #71 Bug Fixes # Fix a URL parsing issue that username will be dropped in the SSH URL. #68 Improved Documentation # Add docs for global project and selecting project path. #30 Release v0.3.2 (2020-03-08) # Features & Improvements # Display all available Python interpreters if users don't give one in pdm init . #67 Bug Fixes # Regard 4.0 as infinite upper bound when checking subsetting. #66 Release v0.3.1 (2020-03-07) # Bug Fixes # Fix a bug that ImpossiblePySpec 's hash clashes with normal one. Release v0.3.0 (2020-02-28) # Features & Improvements # Add a new command pdm config to inspect configurations. #26 Add a new command pdm cache clear to clean caches. #63 Bug Fixes # Correctly show dependency graph when circular dependencies exist. #62 Improved Documentation # Write the initial documentation for PDM. #14 Release v0.2.6 (2020-02-25) # Features & Improvements # Improve the user interface of selecting Python interpreter. #54 Bug Fixes # Fix the wheel installer to correctly unparse the flags of console scripts. #56 Fix a bug that OS-dependent hashes are not saved. #57 Release v0.2.5 (2020-02-22) # Features & Improvements # Allow specifying Python interpreter via --python option in pdm init . #49 Set python_requires when initializing and defaults to >={current_version} . #50 Bug Fixes # Always consider wheels before tarballs; correctly merge markers from different parents. #47 Filter out incompatible wheels when installing. #48 Release v0.2.4 (2020-02-21) # Bug Fixes # Use the project local interpreter to build wheels. #43 Correctly merge Python specifiers when possible. #4 Release v0.2.3 (2020-02-21) # Bug Fixes # Fix a bug that editable build generates a malformed setup.py . Release v0.2.2 (2020-02-20) # Features & Improvements # Add a fancy greeting banner when user types pdm --help . #42 Bug Fixes # Fix the RECORD file in built wheel. #41 Dependencies # Add dependency python-cfonts to display banner. #42 Release v0.2.1 (2020-02-18) # Bug Fixes # Fix a bug that short python_version markers can't be parsed correctly. #38 Make _editable_intall.py compatible with Py2. Release v0.2.0 (2020-02-14) # Features & Improvements # New option: pdm list --graph to show a dependency graph of the working set. #10 New option: pdm update --unconstrained to ignore the version constraint of given packages. #13 Improve the error message when project is not initialized before running commands. #19 Pinned candidates in lock file are reused when relocking during pdm install . #33 Use the pyenv interpreter value if pyenv is installed. #36 Introduce a new command pdm info to show project environment information. #9 Bug Fixes # Fix a bug that candidate hashes will be lost when reused. #11 Dependencies # Update pip to 20.0 , update pip_shims to 0.5.0 . #28 Miscellany # Add a script named setup_dev.py for the convenience to setup pdm for development. #29 Release v0.1.2 (2020-02-09) # Features # New command pdm use to switch python versions. #8 New option pdm list --graph to show a dependency graph. #10 Read metadata from lockfile when pinned candidate is reused. Release v0.1.1 (2020-02-07) # Features # Get version from the specified file. #6 Add column header to pdm list output. Release v0.1.0 (2020-02-07) # Bugfixes # Pass exit code to parent process in pdm run. Fix error handling for CLI. #19 Miscellany # Refactor the installer mocking for tests. Release v0.0.5 (2020-01-22) # Improvements # Ensure pypi index url is fetched in addition to the source settings. #3 Bugfixes # Fix an issue that leading \"c\"s are mistakenly stripped. #5 Fix an error with PEP 517 building. Release v0.0.4 (2020-01-22) # Improvements # Fix editable installation, now editable scripts can also be executed from outside! Content hash is calculated based on dependencies and sources, not other metadata. Bugfixes # Fix an issue that editable distributions can not be removed. Release v0.0.3 (2020-01-22) # Features # Add pdm init to bootstrap a project. Release v0.0.2 (2020-01-22) # Features # A complete functioning PEP 517 build backend. pdm builld command. Miscellany # Add a Chinese README Features # Add pdm init to bootstrap a project. Release v0.0.1 (2020-01-20) # Features # A dependency resolver that just works. A PEP 582 installer. PEP 440 version specifiers. PEP 508 environment markers. Running scripts with PEP 582 local packages. Console scripts are injected with local paths. A neat CLI. add, lock, list, update, remove commands. PEP 517 build backends. Continuous Integration.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#release-v142-2021-03-18","text":"","title":"Release v1.4.2 (2021-03-18)"},{"location":"changelog/#features-improvements","text":"Refactor the code, extract the version related logic from specifiers.py to a separated module. #303","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes","text":"Fix a bug that get_dependencies() returns error when the setup.py has no intall_requires key. #299 Pin the VCS revision for non-editable VCS candidates in the lock file. #305 Fix a bug that editable build hits the cached wheel unexpectedly. #307","title":"Bug Fixes"},{"location":"changelog/#miscellany","text":"replace 'typing comments' with type annotations throughout #298","title":"Miscellany"},{"location":"changelog/#release-v141-2021-03-12","text":"","title":"Release v1.4.1 (2021-03-12)"},{"location":"changelog/#features-improvements_1","text":"Support importing dependencies from requirements.txt to dev-dependencies or sections. #291","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_1","text":"Fallback to static parsing when building was failed to find the dependencies of a candidate. #293 Fix a bug that pdm init fails when pyproject.toml exists but has no [project] section. #295","title":"Bug Fixes"},{"location":"changelog/#improved-documentation","text":"Document about how to use PDM with Nox. #281","title":"Improved Documentation"},{"location":"changelog/#release-v140-2021-03-05","text":"","title":"Release v1.4.0 (2021-03-05)"},{"location":"changelog/#features-improvements_2","text":"When -I/--ignore-python passed or PDM_IGNORE_SAVED_PYTHON=1 , ignore the interpreter set in .pdm.toml and don't save to it afterwards. #283 A new option -p/--project is introduced to specify another path for the project base. It can also be combined with -g/--global option. The latter is changed to a flag only option that does not accept values. #286 Support -f setuppy for pdm export to export the metadata as setup.py #289","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_2","text":"Fix a bug that editable local package requirements cannot be parsed rightly. #285 Change the priority of metadata files to parse so that PEP 621 metadata will be parsed first. #288","title":"Bug Fixes"},{"location":"changelog/#improved-documentation_1","text":"Add examples of how to integrate with CI pipelines (and tox). #281","title":"Improved Documentation"},{"location":"changelog/#release-v134-2021-03-01","text":"","title":"Release v1.3.4 (2021-03-01)"},{"location":"changelog/#improved-documentation_2","text":"added documentation on a task provider for vscode #280","title":"Improved Documentation"},{"location":"changelog/#bug-fixes_3","text":"Ignore the python requires constraints when fetching the link from the PyPI index.","title":"Bug Fixes"},{"location":"changelog/#release-v133-2021-02-26","text":"","title":"Release v1.3.3 (2021-02-26)"},{"location":"changelog/#bug-fixes_4","text":"Fix the requirement string of a VCS requirement to comply with PEP 508. #275 Fix a bug that editable packages with src directory can't be uninstalled correctly. #277 Fix a bug that editable package doesn't override the non-editable version in the working set. #278","title":"Bug Fixes"},{"location":"changelog/#release-v132-2021-02-25","text":"","title":"Release v1.3.2 (2021-02-25)"},{"location":"changelog/#features-improvements_3","text":"Abort and tell user the selected section following pdm sync or pdm install is not present in the error message. #274","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_5","text":"Fix a bug that candidates' sections cannot be retrieved rightly when circular dependencies exist. #270 Don't pass the help argument into the run script method. #272","title":"Bug Fixes"},{"location":"changelog/#release-v131-2021-02-19","text":"","title":"Release v1.3.1 (2021-02-19)"},{"location":"changelog/#bug-fixes_6","text":"Use the absolute path when importing from a Poetry pyproject.toml. #262 Fix a bug that old toml table head is kept when converting to PEP 621 metadata format. #263 Postpone the evaluation of requires-python attribute when fetching the candidates of a package. #264","title":"Bug Fixes"},{"location":"changelog/#release-v130-2021-02-09","text":"","title":"Release v1.3.0 (2021-02-09)"},{"location":"changelog/#features-improvements_4","text":"Increase the default value of the max rounds of resolution to 1000, make it configurable. #238 Rewrite the project's egg-info directory when dependencies change. So that pdm list --graph won't show invalid entries. #240 When importing requirments from a requirments.txt file, build the package to find the name if not given in the URL. #245 When initializing the project, prompt user for whether the project is a library, and give empty name and version if not. #253","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_7","text":"Fix the version validator of wheel metadata to align with the implementation of packaging . #130 Preserve the sections value of a pinned candidate to be reused. #234 Strip spaces in user input when prompting for the python version to use. #252 Fix the version parsing of Python requires to allow > , >= , < , <= to combine with star versions. #254","title":"Bug Fixes"},{"location":"changelog/#release-v120-2021-01-26","text":"","title":"Release v1.2.0 (2021-01-26)"},{"location":"changelog/#features-improvements_5","text":"Change the behavior of --save-compatible slightly. Now the version specifier saved is using the REAL compatible operator ~= as described in PEP 440. Before: requests<3.0.0,>=2.19.1 , After: requests~=2.19 . The new specifier accepts requests==2.19.0 as compatible version. #225 Environment variable ${PROJECT_ROOT} in the dependency specification can be expanded to refer to the project root in pyproject.toml. The environment variables will be kept as they are in the lock file. #226 Change the dependencies of a package in the lock file to a list of PEP 508 strings #236","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_8","text":"Ignore user's site and PYTHONPATH (with python -I mode) when executing pip commands. #231","title":"Bug Fixes"},{"location":"changelog/#improved-documentation_3","text":"Document about how to activate and use a plugin. #227","title":"Improved Documentation"},{"location":"changelog/#dependencies","text":"Test project on pip 21.0 . #235","title":"Dependencies"},{"location":"changelog/#release-v110-2021-01-18","text":"","title":"Release v1.1.0 (2021-01-18)"},{"location":"changelog/#features-improvements_6","text":"Allow users to hide secrets from the pyproject.toml . Dynamically expand env variables in the URLs in dependencies and indexes. Ask whether to store the credentials provided by the user. A user-friendly error will show when credentials are not provided nor correct. #198 Use a different package dir for 32-bit installation(Windows). #212 Auto disable PEP 582 when a venv-like python is given as the interpreter path. #219 Support specifying Python interpreter by pdm use <path-to-python-root> . #221","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_9","text":"Fix a bug of PYTHONPATH manipulation under Windows platform. #215","title":"Bug Fixes"},{"location":"changelog/#removals-and-deprecations","text":"Remove support of the old PEP 517 backend API path. #217","title":"Removals and Deprecations"},{"location":"changelog/#release-v100-2021-01-05","text":"","title":"Release v1.0.0 (2021-01-05)"},{"location":"changelog/#bug-fixes_10","text":"Correctly build wheels for dependencies with build-requirements but without a specified build-backend #213","title":"Bug Fixes"},{"location":"changelog/#release-v100b2-2020-12-29","text":"","title":"Release v1.0.0b2 (2020-12-29)"},{"location":"changelog/#features-improvements_7","text":"Fallback to pypi.org when /search endpoint is not available on given index. #211","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_11","text":"Fix a bug that PDM fails to parse python version specifiers with more than 3 parts. #210","title":"Bug Fixes"},{"location":"changelog/#release-v100b0-2020-12-24","text":"","title":"Release v1.0.0b0 (2020-12-24)"},{"location":"changelog/#features-improvements_8","text":"Fully support of PEP 621 specification. Old format is deprecated at the same time. PDM will migrate the project file for you when old format is detected. Other metadata formats( Poetry , Pipfile , flit ) can also be imported as PEP 621 metadata. #175 Re-implement the pdm search to query the /search HTTP endpoint. #195 Reuse the cached built wheels to accelerate the installation. #200 Make update strategy and save strategy configurable in pdm config. #202 Improve the error message to give more insight on what to do when resolution fails. #207 Set classifiers dynamic in pyproject.toml template for autogeneration. #209","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_12","text":"Fix a bug that distributions are not removed clearly in parallel mode. #204 Fix a bug that python specifier is_subset() returns incorrect result. #206","title":"Bug Fixes"},{"location":"changelog/#release-v0123-2020-12-21","text":"","title":"Release v0.12.3 (2020-12-21)"},{"location":"changelog/#dependencies_1","text":"Pin pdm-pep517 to <0.3.0 , this is the last version to support legacy project metadata format.","title":"Dependencies"},{"location":"changelog/#release-v0122-2020-12-17","text":"","title":"Release v0.12.2 (2020-12-17)"},{"location":"changelog/#features-improvements_9","text":"Update the lock file schema, move the file hashes to [metadata.files] table. #196 Retry failed jobs when syncing packages. #197","title":"Features &amp; Improvements"},{"location":"changelog/#removals-and-deprecations_1","text":"Drop pip-shims package as a dependency. #132","title":"Removals and Deprecations"},{"location":"changelog/#miscellany_1","text":"Fix the cache path for CI. #199","title":"Miscellany"},{"location":"changelog/#release-v0121-2020-12-14","text":"","title":"Release v0.12.1 (2020-12-14)"},{"location":"changelog/#features-improvements_10","text":"Provide an option to export requirements from pyproject.toml #190 For Windows users, pdm --pep582 can enable PEP 582 globally by manipulating the WinReg. #191","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_13","text":"Inject __pypackages__ into PATH env var during pdm run . #193","title":"Bug Fixes"},{"location":"changelog/#release-v0120-2020-12-08","text":"","title":"Release v0.12.0 (2020-12-08)"},{"location":"changelog/#features-improvements_11","text":"Improve the user experience of pdm run : Add a special key in tool.pdm.scripts that holds configurations shared by all scripts. Support loading env var from a dot-env file. Add a flag -s/--site-packages to include system site-packages when running. #178 Now PEP 582 can be enabled in the Python interpreter directly! #181","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_14","text":"Ensure setuptools is installed before invoking editable install script. #174 Require wheel not wheels for global projects #182 Write a sitecustomize.py instead of a .pth file to enable PEP 582. Thanks @Aloxaf. Update get_package_finder() to be compatible with pip 20.3 . #185 Fix the help messages of commands \"cache\" and \"remove\" #187","title":"Bug Fixes"},{"location":"changelog/#release-v0110-2020-11-20","text":"","title":"Release v0.11.0 (2020-11-20)"},{"location":"changelog/#features-improvements_12","text":"Support custom script shortcuts in pyproject.toml . Support custom script shortcuts defined in [tool.pdm.scripts] section. Add pdm run --list/-l to show the list of script shortcuts. #168 Patch the halo library to support parallel spinners. Change the looking of pdm install . #169","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_15","text":"Fix a bug that package's marker fails to propagate to its grandchildren if they have already been resolved. #170 Fix a bug that bare version specifiers in Poetry project can't be converted correctly. #172 Fix the build error that destination directory is not created automatically. #173","title":"Bug Fixes"},{"location":"changelog/#release-v0102-2020-11-05","text":"","title":"Release v0.10.2 (2020-11-05)"},{"location":"changelog/#bug-fixes_16","text":"Building editable distribution does not install build-system.requires anymore. #167","title":"Bug Fixes"},{"location":"changelog/#release-v0101-2020-11-04","text":"","title":"Release v0.10.1 (2020-11-04)"},{"location":"changelog/#bug-fixes_17","text":"Switch the PEP 517 build frontend from build to a home-grown version. #162 Synchronize the output of LogWrapper . #164 Fix a bug that is_subset and is_superset may return wrong result when wildcard excludes overlaps with the upper bound. #165","title":"Bug Fixes"},{"location":"changelog/#release-v0100-2020-10-20","text":"","title":"Release v0.10.0 (2020-10-20)"},{"location":"changelog/#features-improvements_13","text":"Change to Git style config command. #157 Add a command to generate scripts for autocompletion, which is backed by pycomplete . #159","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_18","text":"Fix a bug that sitecustomize.py incorrectly gets injected into the editable console scripts. #158","title":"Bug Fixes"},{"location":"changelog/#release-v092-2020-10-13","text":"","title":"Release v0.9.2 (2020-10-13)"},{"location":"changelog/#features-improvements_14","text":"Cache the built wheels to accelerate resolution and installation process. #153","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_19","text":"Fix a bug that no wheel is matched when finding candidates to install. #155 Fix a bug that installation in parallel will cause encoding initialization error on Ubuntu. #156","title":"Bug Fixes"},{"location":"changelog/#release-v091-2020-10-13","text":"","title":"Release v0.9.1 (2020-10-13)"},{"location":"changelog/#features-improvements_15","text":"Display plain text instead of spinner bar under verbose mode. #150","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_20","text":"Fix a bug that the result of find_matched() is exhausted when accessed twice. #149","title":"Bug Fixes"},{"location":"changelog/#release-v090-2020-10-08","text":"","title":"Release v0.9.0 (2020-10-08)"},{"location":"changelog/#features-improvements_16","text":"Allow users to combine several dependency sections to form an extra require. #131 Split the PEP 517 backend to its own(battery included) package. #134 Add a new option to list command to show reverse dependency graph. #137","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_21","text":"Fix a bug that spaces in path causes requirement parsing error. #138 Fix a bug that requirement's python constraint is not respected when resolving. #141","title":"Bug Fixes"},{"location":"changelog/#dependencies_2","text":"Update pdm-pep517 to 0.2.0 that supports reading version from SCM. #146","title":"Dependencies"},{"location":"changelog/#miscellany_2","text":"Add Python 3.9 to the CI version matrix to verify. #144","title":"Miscellany"},{"location":"changelog/#release-v087-2020-09-04","text":"","title":"Release v0.8.7 (2020-09-04)"},{"location":"changelog/#bug-fixes_22","text":"Fix a compatibility issue with wheel==0.35 . #135","title":"Bug Fixes"},{"location":"changelog/#release-v086-2020-07-09","text":"","title":"Release v0.8.6 (2020-07-09)"},{"location":"changelog/#bug-fixes_23","text":"Fix a bug that extra sources are not respected when fetching distributions. #127","title":"Bug Fixes"},{"location":"changelog/#release-v085-2020-06-24","text":"","title":"Release v0.8.5 (2020-06-24)"},{"location":"changelog/#bug-fixes_24","text":"Fix a bug that pdm export fails when the project doesn't have name property. #126","title":"Bug Fixes"},{"location":"changelog/#dependencies_3","text":"Upgrade dependency pip to 20.1 . #125","title":"Dependencies"},{"location":"changelog/#release-v084-2020-05-21","text":"","title":"Release v0.8.4 (2020-05-21)"},{"location":"changelog/#features-improvements_17","text":"Add a new command export to export to alternative formats. #117","title":"Features &amp; Improvements"},{"location":"changelog/#miscellany_3","text":"Add Dockerfile and pushed to Docker Hub. #122","title":"Miscellany"},{"location":"changelog/#release-v083-2020-05-15","text":"","title":"Release v0.8.3 (2020-05-15)"},{"location":"changelog/#bug-fixes_25","text":"Fix the version constraint parsing of wheel metadata. #120","title":"Bug Fixes"},{"location":"changelog/#release-v082-2020-05-03","text":"","title":"Release v0.8.2 (2020-05-03)"},{"location":"changelog/#bug-fixes_26","text":"Update resolvers to resolvelib 0.4.0. #118","title":"Bug Fixes"},{"location":"changelog/#release-v081-2020-04-22","text":"","title":"Release v0.8.1 (2020-04-22)"},{"location":"changelog/#dependencies_4","text":"Switch to upstream resolvelib 0.3.0 . #116","title":"Dependencies"},{"location":"changelog/#release-v080-2020-04-20","text":"","title":"Release v0.8.0 (2020-04-20)"},{"location":"changelog/#features-improvements_18","text":"Add a new command to search for packages #111 Add show command to show package metadata. #114","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_27","text":"Fix a bug that environment markers cannot be evaluated correctly if extras are connected with \"or\". #107 Don't consult PyPI JSON API by default for package metadata. #112 Eliminate backslashes in markers for TOML documents. #115","title":"Bug Fixes"},{"location":"changelog/#release-v071-2020-04-13","text":"","title":"Release v0.7.1 (2020-04-13)"},{"location":"changelog/#bug-fixes_28","text":"Editable packages requires setuptools to be installed in the isolated environment.","title":"Bug Fixes"},{"location":"changelog/#release-v070-2020-04-12","text":"","title":"Release v0.7.0 (2020-04-12)"},{"location":"changelog/#features-improvements_19","text":"Disable loading of site-packages under PEP 582 mode. #100","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_29","text":"Fix a bug that TOML parsing error is not correctly captured. #101 Fix a bug of building wheels with C extensions that the platform in file name is incorrect. #99","title":"Bug Fixes"},{"location":"changelog/#release-v065-2020-04-07","text":"","title":"Release v0.6.5 (2020-04-07)"},{"location":"changelog/#bug-fixes_30","text":"Unix style executable script suffix is missing.","title":"Bug Fixes"},{"location":"changelog/#release-v064-2020-04-07","text":"","title":"Release v0.6.4 (2020-04-07)"},{"location":"changelog/#features-improvements_20","text":"Update shebang lines in the executable scripts when doing pdm use . #96 Auto-detect commonly used venv directories. #97","title":"Features &amp; Improvements"},{"location":"changelog/#release-v063-2020-03-30","text":"","title":"Release v0.6.3 (2020-03-30)"},{"location":"changelog/#bug-fixes_31","text":"Fix a bug of moving files across different file system. #95","title":"Bug Fixes"},{"location":"changelog/#release-v062-2020-03-29","text":"","title":"Release v0.6.2 (2020-03-29)"},{"location":"changelog/#bug-fixes_32","text":"Validate user input for python_requires when initializing project. #89 Ensure wheel package is available before building packages. #90 Fix an issue of remove command that will unexpectedly uninstall packages in default section. #92","title":"Bug Fixes"},{"location":"changelog/#dependencies_5","text":"Update dependencies pythonfinder , python-cfonts , pip-shims and many others. Drop dependency vistir . #89","title":"Dependencies"},{"location":"changelog/#release-v061-2020-03-25","text":"","title":"Release v0.6.1 (2020-03-25)"},{"location":"changelog/#features-improvements_21","text":"Redirect output messages to log file for installation and locking. #84","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_33","text":"Fix a bug that parallel installation fails due to setuptools reinstalling. #83","title":"Bug Fixes"},{"location":"changelog/#release-v060-2020-03-20","text":"","title":"Release v0.6.0 (2020-03-20)"},{"location":"changelog/#features-improvements_22","text":"Support specifying build script for C extensions. #23 Add test cases for pdm build . #81 Make it configurable whether to consult PyPI JSON API since it may be not trustable. Support parallel installation. Add new command pmd import to import project metadata from Pipfile , poetry , flit , requirements.txt . #79 pdm init and pdm install will auto-detect possible files that can be imported.","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_34","text":"Fix wheel builds when package_dir is mapped. #81 pdm init will use the current directory rather than finding the parents when global project is not activated.","title":"Bug Fixes"},{"location":"changelog/#release-v050-2020-03-14","text":"","title":"Release v0.5.0 (2020-03-14)"},{"location":"changelog/#features-improvements_23","text":"Introduce a super easy-to-extend plug-in system to PDM. #75","title":"Features &amp; Improvements"},{"location":"changelog/#improved-documentation_4","text":"Documentation on how to write a plugin. #75","title":"Improved Documentation"},{"location":"changelog/#bug-fixes_35","text":"Fix a typo in metadata parsing from plugins to entry_points","title":"Bug Fixes"},{"location":"changelog/#release-v042-2020-03-13","text":"","title":"Release v0.4.2 (2020-03-13)"},{"location":"changelog/#features-improvements_24","text":"Refactor the CLI part, switch from click to argparse , for better extensibility. #73 Allow users to configure to install packages into venv when it is activated. #74","title":"Features &amp; Improvements"},{"location":"changelog/#release-v041-2020-03-11","text":"","title":"Release v0.4.1 (2020-03-11)"},{"location":"changelog/#features-improvements_25","text":"Add a minimal dependency set for global project. #72","title":"Features &amp; Improvements"},{"location":"changelog/#release-v040-2020-03-10","text":"","title":"Release v0.4.0 (2020-03-10)"},{"location":"changelog/#features-improvements_26","text":"Global project support Add a new option -g/--global to manage global project. The default location is at ~/.pdm/global-project . Use the virtualenv interpreter when detected inside an activated venv. Add a new option -p/--project to select project root other than the default one. #30 Add a new command pdm config del to delete an existing config item. #71","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_36","text":"Fix a URL parsing issue that username will be dropped in the SSH URL. #68","title":"Bug Fixes"},{"location":"changelog/#improved-documentation_5","text":"Add docs for global project and selecting project path. #30","title":"Improved Documentation"},{"location":"changelog/#release-v032-2020-03-08","text":"","title":"Release v0.3.2 (2020-03-08)"},{"location":"changelog/#features-improvements_27","text":"Display all available Python interpreters if users don't give one in pdm init . #67","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_37","text":"Regard 4.0 as infinite upper bound when checking subsetting. #66","title":"Bug Fixes"},{"location":"changelog/#release-v031-2020-03-07","text":"","title":"Release v0.3.1 (2020-03-07)"},{"location":"changelog/#bug-fixes_38","text":"Fix a bug that ImpossiblePySpec 's hash clashes with normal one.","title":"Bug Fixes"},{"location":"changelog/#release-v030-2020-02-28","text":"","title":"Release v0.3.0 (2020-02-28)"},{"location":"changelog/#features-improvements_28","text":"Add a new command pdm config to inspect configurations. #26 Add a new command pdm cache clear to clean caches. #63","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_39","text":"Correctly show dependency graph when circular dependencies exist. #62","title":"Bug Fixes"},{"location":"changelog/#improved-documentation_6","text":"Write the initial documentation for PDM. #14","title":"Improved Documentation"},{"location":"changelog/#release-v026-2020-02-25","text":"","title":"Release v0.2.6 (2020-02-25)"},{"location":"changelog/#features-improvements_29","text":"Improve the user interface of selecting Python interpreter. #54","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_40","text":"Fix the wheel installer to correctly unparse the flags of console scripts. #56 Fix a bug that OS-dependent hashes are not saved. #57","title":"Bug Fixes"},{"location":"changelog/#release-v025-2020-02-22","text":"","title":"Release v0.2.5 (2020-02-22)"},{"location":"changelog/#features-improvements_30","text":"Allow specifying Python interpreter via --python option in pdm init . #49 Set python_requires when initializing and defaults to >={current_version} . #50","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_41","text":"Always consider wheels before tarballs; correctly merge markers from different parents. #47 Filter out incompatible wheels when installing. #48","title":"Bug Fixes"},{"location":"changelog/#release-v024-2020-02-21","text":"","title":"Release v0.2.4 (2020-02-21)"},{"location":"changelog/#bug-fixes_42","text":"Use the project local interpreter to build wheels. #43 Correctly merge Python specifiers when possible. #4","title":"Bug Fixes"},{"location":"changelog/#release-v023-2020-02-21","text":"","title":"Release v0.2.3 (2020-02-21)"},{"location":"changelog/#bug-fixes_43","text":"Fix a bug that editable build generates a malformed setup.py .","title":"Bug Fixes"},{"location":"changelog/#release-v022-2020-02-20","text":"","title":"Release v0.2.2 (2020-02-20)"},{"location":"changelog/#features-improvements_31","text":"Add a fancy greeting banner when user types pdm --help . #42","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_44","text":"Fix the RECORD file in built wheel. #41","title":"Bug Fixes"},{"location":"changelog/#dependencies_6","text":"Add dependency python-cfonts to display banner. #42","title":"Dependencies"},{"location":"changelog/#release-v021-2020-02-18","text":"","title":"Release v0.2.1 (2020-02-18)"},{"location":"changelog/#bug-fixes_45","text":"Fix a bug that short python_version markers can't be parsed correctly. #38 Make _editable_intall.py compatible with Py2.","title":"Bug Fixes"},{"location":"changelog/#release-v020-2020-02-14","text":"","title":"Release v0.2.0 (2020-02-14)"},{"location":"changelog/#features-improvements_32","text":"New option: pdm list --graph to show a dependency graph of the working set. #10 New option: pdm update --unconstrained to ignore the version constraint of given packages. #13 Improve the error message when project is not initialized before running commands. #19 Pinned candidates in lock file are reused when relocking during pdm install . #33 Use the pyenv interpreter value if pyenv is installed. #36 Introduce a new command pdm info to show project environment information. #9","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_46","text":"Fix a bug that candidate hashes will be lost when reused. #11","title":"Bug Fixes"},{"location":"changelog/#dependencies_7","text":"Update pip to 20.0 , update pip_shims to 0.5.0 . #28","title":"Dependencies"},{"location":"changelog/#miscellany_4","text":"Add a script named setup_dev.py for the convenience to setup pdm for development. #29","title":"Miscellany"},{"location":"changelog/#release-v012-2020-02-09","text":"","title":"Release v0.1.2 (2020-02-09)"},{"location":"changelog/#features","text":"New command pdm use to switch python versions. #8 New option pdm list --graph to show a dependency graph. #10 Read metadata from lockfile when pinned candidate is reused.","title":"Features"},{"location":"changelog/#release-v011-2020-02-07","text":"","title":"Release v0.1.1 (2020-02-07)"},{"location":"changelog/#features_1","text":"Get version from the specified file. #6 Add column header to pdm list output.","title":"Features"},{"location":"changelog/#release-v010-2020-02-07","text":"","title":"Release v0.1.0 (2020-02-07)"},{"location":"changelog/#bugfixes","text":"Pass exit code to parent process in pdm run. Fix error handling for CLI. #19","title":"Bugfixes"},{"location":"changelog/#miscellany_5","text":"Refactor the installer mocking for tests.","title":"Miscellany"},{"location":"changelog/#release-v005-2020-01-22","text":"","title":"Release v0.0.5 (2020-01-22)"},{"location":"changelog/#improvements","text":"Ensure pypi index url is fetched in addition to the source settings. #3","title":"Improvements"},{"location":"changelog/#bugfixes_1","text":"Fix an issue that leading \"c\"s are mistakenly stripped. #5 Fix an error with PEP 517 building.","title":"Bugfixes"},{"location":"changelog/#release-v004-2020-01-22","text":"","title":"Release v0.0.4 (2020-01-22)"},{"location":"changelog/#improvements_1","text":"Fix editable installation, now editable scripts can also be executed from outside! Content hash is calculated based on dependencies and sources, not other metadata.","title":"Improvements"},{"location":"changelog/#bugfixes_2","text":"Fix an issue that editable distributions can not be removed.","title":"Bugfixes"},{"location":"changelog/#release-v003-2020-01-22","text":"","title":"Release v0.0.3 (2020-01-22)"},{"location":"changelog/#features_2","text":"Add pdm init to bootstrap a project.","title":"Features"},{"location":"changelog/#release-v002-2020-01-22","text":"","title":"Release v0.0.2 (2020-01-22)"},{"location":"changelog/#features_3","text":"A complete functioning PEP 517 build backend. pdm builld command.","title":"Features"},{"location":"changelog/#miscellany_6","text":"Add a Chinese README","title":"Miscellany"},{"location":"changelog/#features_4","text":"Add pdm init to bootstrap a project.","title":"Features"},{"location":"changelog/#release-v001-2020-01-20","text":"","title":"Release v0.0.1 (2020-01-20)"},{"location":"changelog/#features_5","text":"A dependency resolver that just works. A PEP 582 installer. PEP 440 version specifiers. PEP 508 environment markers. Running scripts with PEP 582 local packages. Console scripts are injected with local paths. A neat CLI. add, lock, list, update, remove commands. PEP 517 build backends. Continuous Integration.","title":"Features"},{"location":"contributing/","text":"Contributing to PDM # First off, thanks for taking the time to contribute! Contributions include but are not restricted to: Reporting bugs Contributing to code Writing tests Writing documents The following is a set of guidelines for contributing. A recommended flow of contributing to an Open Source project. # This guideline is for new beginners of OSS. If you are an experienced OSS developer, you can skip this section. First, fork this project to your own namespace using the fork button at the top right of the repository page. Clone the upstream repository to local: 1 2 3 $ git clone https://github.com/frostming/pdm.git # Or if you prefer SSH clone: $ git clone git@github.com:frostming/pdm.git Add the fork as a new remote: 1 2 $ git remote add fork https://github.com/yourname/pdm.git $ git fetch fork where fork is the remote name of the fork repository. ProTips: 1. Don't modify code on the master branch, the master branch should always keep track of origin/master. To update master branch to date: 1 2 3 $ git pull origin master # In rare cases that your local master branch diverges from the remote master: $ git fetch origin && git reset --hard master 2. Create a new branch based on the up-to-date master for new patches. 3. Create a Pull Request from that patch branch. Local development # To make sure the tests suites can run rightly, you need to install Git LFS , then 1 $ git lfs install Then, you need to install base dependencies in a venv. Although PDM uses local package directory to install dependencies, venv is still needed to start up PDM at the first time: 1 $ python setup_dev.py Now, all dependencies are installed into local __pypackages__ directory, which will be used for development after this point. The pdm executable located at __pypackages__/<VERSION>/bin can be run directly from outside, which is installed in editable mode, or you can use python -m pdm from inside the venv. Run tests # 1 $ pdm run test The test suite is still simple and requires to be supplied, please help write more test cases. Code style # PDM uses pre-commit for linting, you need to install pre-commit first, then: 1 2 $ pre-commit install $ pdm run lint PDM uses black coding style and isort for sorting import statements, if you are not following them, the CI will fail, and your Pull Request will not be merged. Preview the documentation # If you do some changes to the docs/ and you may want to preview the build result, simply do: 1 $ pdm run doc","title":"Contributing"},{"location":"contributing/#contributing-to-pdm","text":"First off, thanks for taking the time to contribute! Contributions include but are not restricted to: Reporting bugs Contributing to code Writing tests Writing documents The following is a set of guidelines for contributing.","title":"Contributing to PDM"},{"location":"contributing/#a-recommended-flow-of-contributing-to-an-open-source-project","text":"This guideline is for new beginners of OSS. If you are an experienced OSS developer, you can skip this section. First, fork this project to your own namespace using the fork button at the top right of the repository page. Clone the upstream repository to local: 1 2 3 $ git clone https://github.com/frostming/pdm.git # Or if you prefer SSH clone: $ git clone git@github.com:frostming/pdm.git Add the fork as a new remote: 1 2 $ git remote add fork https://github.com/yourname/pdm.git $ git fetch fork where fork is the remote name of the fork repository. ProTips: 1. Don't modify code on the master branch, the master branch should always keep track of origin/master. To update master branch to date: 1 2 3 $ git pull origin master # In rare cases that your local master branch diverges from the remote master: $ git fetch origin && git reset --hard master 2. Create a new branch based on the up-to-date master for new patches. 3. Create a Pull Request from that patch branch.","title":"A recommended flow of contributing to an Open Source project."},{"location":"contributing/#local-development","text":"To make sure the tests suites can run rightly, you need to install Git LFS , then 1 $ git lfs install Then, you need to install base dependencies in a venv. Although PDM uses local package directory to install dependencies, venv is still needed to start up PDM at the first time: 1 $ python setup_dev.py Now, all dependencies are installed into local __pypackages__ directory, which will be used for development after this point. The pdm executable located at __pypackages__/<VERSION>/bin can be run directly from outside, which is installed in editable mode, or you can use python -m pdm from inside the venv.","title":"Local development"},{"location":"contributing/#run-tests","text":"1 $ pdm run test The test suite is still simple and requires to be supplied, please help write more test cases.","title":"Run tests"},{"location":"contributing/#code-style","text":"PDM uses pre-commit for linting, you need to install pre-commit first, then: 1 2 $ pre-commit install $ pdm run lint PDM uses black coding style and isort for sorting import statements, if you are not following them, the CI will fail, and your Pull Request will not be merged.","title":"Code style"},{"location":"contributing/#preview-the-documentation","text":"If you do some changes to the docs/ and you may want to preview the build result, simply do: 1 $ pdm run doc","title":"Preview the documentation"},{"location":"dependency/","text":"Manage dependencies # PDM provides a bunch of handful commands to help manage your project and dependencies. The following examples are run on Ubuntu 18.04, a few changes must be done if you are using Windows. Initialize a project # 1 2 $ mkdir pdm-test && cd pdm-test $ pdm init Answer several questions asked by PDM and a pyproject.toml will be created for you in the project root: 1 2 3 4 5 6 7 8 9 10 11 12 [project] name = \"pdm-test\" version = \"0.0.0\" description = \"\" authors = [ { name = \"Frost Ming\" , email = \"mianghong@gmail.com\" } ] license = { text = \"MIT\" } requires-python = \">=3.7\" dependencies = [] dev-dependencies = [] If pyproject.toml is already present, it will be updated with the metadata. The metadata format follows the PEP 621 specification For details of the meaning of each field in pyproject.toml , please refer to Project File . Add dependencies # 1 2 $ pdm add requests $ pdm add -d pytest pdm add can be followed by one or several dependencies, and the dependency specification is described in PEP 508 . There are two groups of dependencies: packages will be added to project.dependencies by default or project.dev-dependencies if -d/--dev option is passed to the pdm add command. PDM also allows extra dependency groups by providing -s/--section <name> option, and the dependencies will appear in project.optional-dependencies.<name> in the project file, respectively. After that, dependencies and sub-dependencies will be resolved properly and installed for you, you can view pdm.lock to see the resolved result of all dependencies. Local packages can be installed in editable mode (just like pip install -e <local project path> would) using pdm add -e/--editable <local project path> . Save version specifiers # If the package is given without a version specifier like pdm add requests . PDM provides three different behaviors of what version specifier is saved for the dependency, which is given by --save-<strategy> (Assume 2.21.0 is the latest version that can be found for the dependency): compatible : Save the compatible version specifier: >=2.21.0,<3.0.0 (default). exact : Save the exact version specifier: ==2.21.0 . wildcard : Don't constrain version and leave the specifier to be wildcard: * . Update existing dependencies # To update all dependencies in the lock file: 1 $ pdm update To update the specified package(s): 1 $ pdm update requests About update strategy # Similarly, PDM also provides 2 different behaviors of updating dependencies and sub-dependencies\uff0c which is given by --update-<strategy> option: reuse : Keep all locked dependencies except for those given in the command line. eager : Try to lock a newer version of the packages in command line and their recursive sub-dependencies and keep other dependencies as they are. Remove existing dependencies # To remove existing dependencies from project file and the library directory: 1 $ pdm remove requests Synchronize the project packages with lock file # There are two similar commands to do this job with a slight difference: pdm install will check the lock file and relock if it mismatches with project file, then install. pdm sync install dependencies in the lock file and will error out if it doesn't exist. Besides, pdm sync can also remove unneeded packages if --clean option is given. Show what packages are installed # Similar to pip list , you can list all packages installed in the packages directory: 1 $ pdm list Or show a dependency graph by: 1 2 3 4 5 6 7 8 9 10 11 12 $ pdm list --graph tempenv 0.0.0 \u2514\u2500\u2500 click 7.0 [ required: <7.0.0,>=6.7 ] black 19.10b0 \u251c\u2500\u2500 appdirs 1.4.3 [ required: Any ] \u251c\u2500\u2500 attrs 19.3.0 [ required: >=18.1.0 ] \u251c\u2500\u2500 click 7.0 [ required: >=6.5 ] \u251c\u2500\u2500 pathspec 0.7.0 [ required: <1,>=0.6 ] \u251c\u2500\u2500 regex 2020.2.20 [ required: Any ] \u251c\u2500\u2500 toml 0.10.0 [ required: >=0.9.4 ] \u2514\u2500\u2500 typed-ast 1.4.1 [ required: >=1.4.0 ] bump2version 1.0.0 Set PyPI index URL # You can specify a PyPI mirror URL by following commands: 1 $ pdm config set pypi.url https://testpypi.org/simple By default, PDM will read the pip's configuration files to decide the PyPI URL, and fallback to https://pypi.org/simple if none is found. Add extra sources of packages # Sometimes your packages may exist on a private repository other than PyPI(and its mirrors). These sources should be preserved in pyproject.toml and shipped with the project in deployment. 1 2 3 4 [[tool.pdm.source]] url = \"http://example.com/private/index\" verify_ssl = false # Don't verify SSL, it is required when you are using `HTTP` or the certificate is trusted. name = \"private\" Use the name name = \"pypi\" if you want to override the configured PyPI index. Note that PDM specific settings are stored under tool.pdm namespace in the pyproject.toml . Allow prerelease versions to be installed # Include the following setting in pyproject.toml to enable: 1 2 [[tool.pdm]] allow_prereleases = true Environment variables expansion # For convenience, PDM supports environment variables expansion in the dependency specification under some circumstances: Environment variables in the URL auth part will be expanded: https://${USERNAME}:${PASSWORD}/artifacts.io/Flask-1.1.2.tar.gz . It is also okay to not give the auth part in the URL directly, PDM will ask for them when -v/--verbose is on. ${PROJECT_ROOT} will be expanded with the absolute path of the project root, in POSIX style(i.e. forward slash / , even on Windows). For consistency, URLs that refer to a local path under ${PROJECT_ROOT} must start with file:/// (three slashes), e.g. file:///${PROJECT_ROOT}/artifacts/Flask-1.1.2.tar.gz . Don't worry about credential leakage, the environment variables will be expanded when needed and kept untouched in the lock file.","title":"Manage dependencies"},{"location":"dependency/#manage-dependencies","text":"PDM provides a bunch of handful commands to help manage your project and dependencies. The following examples are run on Ubuntu 18.04, a few changes must be done if you are using Windows.","title":"Manage dependencies"},{"location":"dependency/#initialize-a-project","text":"1 2 $ mkdir pdm-test && cd pdm-test $ pdm init Answer several questions asked by PDM and a pyproject.toml will be created for you in the project root: 1 2 3 4 5 6 7 8 9 10 11 12 [project] name = \"pdm-test\" version = \"0.0.0\" description = \"\" authors = [ { name = \"Frost Ming\" , email = \"mianghong@gmail.com\" } ] license = { text = \"MIT\" } requires-python = \">=3.7\" dependencies = [] dev-dependencies = [] If pyproject.toml is already present, it will be updated with the metadata. The metadata format follows the PEP 621 specification For details of the meaning of each field in pyproject.toml , please refer to Project File .","title":"Initialize a project"},{"location":"dependency/#add-dependencies","text":"1 2 $ pdm add requests $ pdm add -d pytest pdm add can be followed by one or several dependencies, and the dependency specification is described in PEP 508 . There are two groups of dependencies: packages will be added to project.dependencies by default or project.dev-dependencies if -d/--dev option is passed to the pdm add command. PDM also allows extra dependency groups by providing -s/--section <name> option, and the dependencies will appear in project.optional-dependencies.<name> in the project file, respectively. After that, dependencies and sub-dependencies will be resolved properly and installed for you, you can view pdm.lock to see the resolved result of all dependencies. Local packages can be installed in editable mode (just like pip install -e <local project path> would) using pdm add -e/--editable <local project path> .","title":"Add dependencies"},{"location":"dependency/#save-version-specifiers","text":"If the package is given without a version specifier like pdm add requests . PDM provides three different behaviors of what version specifier is saved for the dependency, which is given by --save-<strategy> (Assume 2.21.0 is the latest version that can be found for the dependency): compatible : Save the compatible version specifier: >=2.21.0,<3.0.0 (default). exact : Save the exact version specifier: ==2.21.0 . wildcard : Don't constrain version and leave the specifier to be wildcard: * .","title":"Save version specifiers"},{"location":"dependency/#update-existing-dependencies","text":"To update all dependencies in the lock file: 1 $ pdm update To update the specified package(s): 1 $ pdm update requests","title":"Update existing dependencies"},{"location":"dependency/#about-update-strategy","text":"Similarly, PDM also provides 2 different behaviors of updating dependencies and sub-dependencies\uff0c which is given by --update-<strategy> option: reuse : Keep all locked dependencies except for those given in the command line. eager : Try to lock a newer version of the packages in command line and their recursive sub-dependencies and keep other dependencies as they are.","title":"About update strategy"},{"location":"dependency/#remove-existing-dependencies","text":"To remove existing dependencies from project file and the library directory: 1 $ pdm remove requests","title":"Remove existing dependencies"},{"location":"dependency/#synchronize-the-project-packages-with-lock-file","text":"There are two similar commands to do this job with a slight difference: pdm install will check the lock file and relock if it mismatches with project file, then install. pdm sync install dependencies in the lock file and will error out if it doesn't exist. Besides, pdm sync can also remove unneeded packages if --clean option is given.","title":"Synchronize the project packages with lock file"},{"location":"dependency/#show-what-packages-are-installed","text":"Similar to pip list , you can list all packages installed in the packages directory: 1 $ pdm list Or show a dependency graph by: 1 2 3 4 5 6 7 8 9 10 11 12 $ pdm list --graph tempenv 0.0.0 \u2514\u2500\u2500 click 7.0 [ required: <7.0.0,>=6.7 ] black 19.10b0 \u251c\u2500\u2500 appdirs 1.4.3 [ required: Any ] \u251c\u2500\u2500 attrs 19.3.0 [ required: >=18.1.0 ] \u251c\u2500\u2500 click 7.0 [ required: >=6.5 ] \u251c\u2500\u2500 pathspec 0.7.0 [ required: <1,>=0.6 ] \u251c\u2500\u2500 regex 2020.2.20 [ required: Any ] \u251c\u2500\u2500 toml 0.10.0 [ required: >=0.9.4 ] \u2514\u2500\u2500 typed-ast 1.4.1 [ required: >=1.4.0 ] bump2version 1.0.0","title":"Show what packages are installed"},{"location":"dependency/#set-pypi-index-url","text":"You can specify a PyPI mirror URL by following commands: 1 $ pdm config set pypi.url https://testpypi.org/simple By default, PDM will read the pip's configuration files to decide the PyPI URL, and fallback to https://pypi.org/simple if none is found.","title":"Set PyPI index URL"},{"location":"dependency/#add-extra-sources-of-packages","text":"Sometimes your packages may exist on a private repository other than PyPI(and its mirrors). These sources should be preserved in pyproject.toml and shipped with the project in deployment. 1 2 3 4 [[tool.pdm.source]] url = \"http://example.com/private/index\" verify_ssl = false # Don't verify SSL, it is required when you are using `HTTP` or the certificate is trusted. name = \"private\" Use the name name = \"pypi\" if you want to override the configured PyPI index. Note that PDM specific settings are stored under tool.pdm namespace in the pyproject.toml .","title":"Add extra sources of packages"},{"location":"dependency/#allow-prerelease-versions-to-be-installed","text":"Include the following setting in pyproject.toml to enable: 1 2 [[tool.pdm]] allow_prereleases = true","title":"Allow prerelease versions to be installed"},{"location":"dependency/#environment-variables-expansion","text":"For convenience, PDM supports environment variables expansion in the dependency specification under some circumstances: Environment variables in the URL auth part will be expanded: https://${USERNAME}:${PASSWORD}/artifacts.io/Flask-1.1.2.tar.gz . It is also okay to not give the auth part in the URL directly, PDM will ask for them when -v/--verbose is on. ${PROJECT_ROOT} will be expanded with the absolute path of the project root, in POSIX style(i.e. forward slash / , even on Windows). For consistency, URLs that refer to a local path under ${PROJECT_ROOT} must start with file:/// (three slashes), e.g. file:///${PROJECT_ROOT}/artifacts/Flask-1.1.2.tar.gz . Don't worry about credential leakage, the environment variables will be expanded when needed and kept untouched in the lock file.","title":"Environment variables expansion"},{"location":"plugin/","text":"Write a plugin # PDM is aiming at being a community driven package manager. It is shipped with a full-featured plug-in system, with which you can: Develop a new command for PDM Add additional options to existing PDM commands Change PDM's behavior by reading additional config items Control the process of dependency resolution or installation What should a plugin do # The core PDM project focuses on dependency management and package publishing. Other functionalities you wish to integrate with PDM are preferred to lie in their own plugins and released as standalone PyPI projects. In case the plugin is considered a good supplement of the core project it may have a chance to be absorbed into PDM. Write your own plugin # In the following sections, I will show an example of adding a new command hello which reads the hello.name config. Write the command # The PDM's CLI module is designed in a way that user can easily \"inherit and modify\". To write a new command: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from pdm.cli.commands.base import BaseCommand class HelloCommand ( BaseCommand ): \"\"\"Say hello to the specified person. If none is given, will read from \"hello.name\" config. \"\"\" def add_arguments ( self , parser ): parser . add_argument ( \"-n\" , \"--name\" , help = \"the person's name to whom you greet\" ) def handle ( self , project , options ): if not options . name : name = project . config [ \"hello.name\" ] else : name = options . name print ( f \"Hello, { name } \" ) First, let's create a new HelloCommand class inherting from pdm.cli.commands.base.BaseCommand . It has two major functions: add_arguments() to manipulate the argument parser passed as the only argument, where you can add additional command line arguments to it handle() to do something when the subcommand is matched, you can do nothing by writing a single pass statement. It accepts two arguments: an pdm.project.Project object as the first one and the parsed argparse.Namespace object as the second. The document string will serve as the command help text, which will be shown in pdm --help . Besides, PDM's subcommand has two default options: -v/--verbose to change the verbosity level and -g/--global to enable global project. If you don't want these default options, override the arguments class attribute to a list of pdm.cli.options.Option objects, or assign it to an empty list to have no default options: 1 2 3 class HelloCommand ( BaseCommand ): arguments = [] Note The default options are loaded first, then add_arguments() is called. Register the command to the core object # Write a function somewhere in your plugin project. There is no limit on what the name of the function is, but the function should take only one argument -- the PDM core object: 1 2 def hello_plugin ( core ): core . register_command ( HelloCommand , \"hello\" ) Call core.register_command() to register the command. The second argument as the name of the subcommand is optional. PDM will look for the HelloCommand 's name attribute if the name is not passed. Add a new config item # Let's recall the first code snippet, hello.name config key is consulted for the name if not passed via the command line. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class HelloCommand ( BaseCommand ): \"\"\"Say hello to the specified person. If none is given, will read from \"hello.name\" config. \"\"\" def add_arguments ( self , parser ): parser . add_argument ( \"-n\" , \"--name\" , help = \"the person's name to whom you greet\" ) def handle ( self , project , options ): if not options . name : name = project . config [ \"hello.name\" ] else : name = options . name print ( f \"Hello, { name } \" ) Till now, if you query the config value by pdm config get hello.name , an error will pop up saying it is not a valid config key. You need to register the config item, too: 1 2 3 4 5 from pdm.project.config import ConfigItem def hello_plugin ( core ): core . register_command ( HelloCommand , \"hello\" ) core . add_config ( \"hello.name\" , ConfigItem ( \"The person's name\" , \"John\" )) where ConfigItem class takes 4 parameters, in the following order: description : a description of the config item default : default value of the config item global_only : whether the config is allowed to set in home config only env_var : the name of environment variable which will be read as the config value Other plugin points # Besides of commands and configurations, PDM provides some other plugin abilities which are not covered in the above example: core.project_class : change the class of project object core.repository_class : change the class of repository object, which controls how to look for candidates and metadata of a package core.resolver_class : change the resolver class, to control the resolution process core.synchronizer_class : change the synchronizer_class, to control the installation process core.parser : add arguments to the root argument parser Tips about developing a PDM plugin. # When developing a plugin, one hopes to activate and plugin in development and get updated when the code changes. This is usually done by pip install -e . or python setup.py develop in the traditional Python packaging world which leverages setup.py to do so. However, as there is no such setup.py in a PDM project, how can we do that? Fortunately, it becomes even easier with PDM and PEP 582. First, you should enable PEP 582 globally following the corresponding part of this doc . Then you just need to install all dependencies into the __pypackages__ directory by: 1 $ pdm install -d After that, all the dependencies are available with a compatible Python interpreter, including the plugin itself, in editable mode. That means any change to the codebase will take effect immediately without re-installation. The pdm executable also uses a Python interpreter under the hood, so if you run pdm from inside the plugin project, the plugin in development will be activated automatically, and you can do some testing to see how it works. That is how PEP 582 benefits our development workflow. Publish your plugin # Now you have defined your plugin already, let's distribute it to PyPI. PDM's plugins are discovered by entry point types. Create an pdm.plugin entry point and point to your plugin callable (yeah, it doesn't need to be a function, any callable object can work): PEP 621 : 1 2 3 4 # pyproject.toml [project.entry-points.\"pdm.plugin\"] hello = \"my_plugin:hello_plugin\" Note that pdm.plugin is wrapped with double quotes to be regarded as a single key. setuptools : 1 2 3 4 5 6 7 # setup.py setup ( ... entry_points = { \"pdm.plugin\" : [ \"hello = my_plugin:hello_plugin\" ]} ... ) Activate the plugin # As plugins are loaded via entry points, they can be activated with no more steps than just installing the plugin. Assume your plugin is published as pdm-hello , and if you installed pdm via pipx : 1 $ pipx inject pdm pdm-hello Or if you installed pdm via homebrew : 1 $ $( brew --prefix pdm ) /libexec/bin/python -m pip install pdm-hello Otherwise, if you installed pdm with normal pip install : 1 $ pip install --user pdm-hello The core idea is you must install the plugin in the same site-package directory as pdm . Now type in pdm --help in the terminal, you will see the new added hello command and use it: 1 2 $ pdm hello Jack Hello, Jack","title":"Write a plugin"},{"location":"plugin/#write-a-plugin","text":"PDM is aiming at being a community driven package manager. It is shipped with a full-featured plug-in system, with which you can: Develop a new command for PDM Add additional options to existing PDM commands Change PDM's behavior by reading additional config items Control the process of dependency resolution or installation","title":"Write a plugin"},{"location":"plugin/#what-should-a-plugin-do","text":"The core PDM project focuses on dependency management and package publishing. Other functionalities you wish to integrate with PDM are preferred to lie in their own plugins and released as standalone PyPI projects. In case the plugin is considered a good supplement of the core project it may have a chance to be absorbed into PDM.","title":"What should a plugin do"},{"location":"plugin/#write-your-own-plugin","text":"In the following sections, I will show an example of adding a new command hello which reads the hello.name config.","title":"Write your own plugin"},{"location":"plugin/#write-the-command","text":"The PDM's CLI module is designed in a way that user can easily \"inherit and modify\". To write a new command: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from pdm.cli.commands.base import BaseCommand class HelloCommand ( BaseCommand ): \"\"\"Say hello to the specified person. If none is given, will read from \"hello.name\" config. \"\"\" def add_arguments ( self , parser ): parser . add_argument ( \"-n\" , \"--name\" , help = \"the person's name to whom you greet\" ) def handle ( self , project , options ): if not options . name : name = project . config [ \"hello.name\" ] else : name = options . name print ( f \"Hello, { name } \" ) First, let's create a new HelloCommand class inherting from pdm.cli.commands.base.BaseCommand . It has two major functions: add_arguments() to manipulate the argument parser passed as the only argument, where you can add additional command line arguments to it handle() to do something when the subcommand is matched, you can do nothing by writing a single pass statement. It accepts two arguments: an pdm.project.Project object as the first one and the parsed argparse.Namespace object as the second. The document string will serve as the command help text, which will be shown in pdm --help . Besides, PDM's subcommand has two default options: -v/--verbose to change the verbosity level and -g/--global to enable global project. If you don't want these default options, override the arguments class attribute to a list of pdm.cli.options.Option objects, or assign it to an empty list to have no default options: 1 2 3 class HelloCommand ( BaseCommand ): arguments = [] Note The default options are loaded first, then add_arguments() is called.","title":"Write the command"},{"location":"plugin/#register-the-command-to-the-core-object","text":"Write a function somewhere in your plugin project. There is no limit on what the name of the function is, but the function should take only one argument -- the PDM core object: 1 2 def hello_plugin ( core ): core . register_command ( HelloCommand , \"hello\" ) Call core.register_command() to register the command. The second argument as the name of the subcommand is optional. PDM will look for the HelloCommand 's name attribute if the name is not passed.","title":"Register the command to the core object"},{"location":"plugin/#add-a-new-config-item","text":"Let's recall the first code snippet, hello.name config key is consulted for the name if not passed via the command line. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class HelloCommand ( BaseCommand ): \"\"\"Say hello to the specified person. If none is given, will read from \"hello.name\" config. \"\"\" def add_arguments ( self , parser ): parser . add_argument ( \"-n\" , \"--name\" , help = \"the person's name to whom you greet\" ) def handle ( self , project , options ): if not options . name : name = project . config [ \"hello.name\" ] else : name = options . name print ( f \"Hello, { name } \" ) Till now, if you query the config value by pdm config get hello.name , an error will pop up saying it is not a valid config key. You need to register the config item, too: 1 2 3 4 5 from pdm.project.config import ConfigItem def hello_plugin ( core ): core . register_command ( HelloCommand , \"hello\" ) core . add_config ( \"hello.name\" , ConfigItem ( \"The person's name\" , \"John\" )) where ConfigItem class takes 4 parameters, in the following order: description : a description of the config item default : default value of the config item global_only : whether the config is allowed to set in home config only env_var : the name of environment variable which will be read as the config value","title":"Add a new config item"},{"location":"plugin/#other-plugin-points","text":"Besides of commands and configurations, PDM provides some other plugin abilities which are not covered in the above example: core.project_class : change the class of project object core.repository_class : change the class of repository object, which controls how to look for candidates and metadata of a package core.resolver_class : change the resolver class, to control the resolution process core.synchronizer_class : change the synchronizer_class, to control the installation process core.parser : add arguments to the root argument parser","title":"Other plugin points"},{"location":"plugin/#tips-about-developing-a-pdm-plugin","text":"When developing a plugin, one hopes to activate and plugin in development and get updated when the code changes. This is usually done by pip install -e . or python setup.py develop in the traditional Python packaging world which leverages setup.py to do so. However, as there is no such setup.py in a PDM project, how can we do that? Fortunately, it becomes even easier with PDM and PEP 582. First, you should enable PEP 582 globally following the corresponding part of this doc . Then you just need to install all dependencies into the __pypackages__ directory by: 1 $ pdm install -d After that, all the dependencies are available with a compatible Python interpreter, including the plugin itself, in editable mode. That means any change to the codebase will take effect immediately without re-installation. The pdm executable also uses a Python interpreter under the hood, so if you run pdm from inside the plugin project, the plugin in development will be activated automatically, and you can do some testing to see how it works. That is how PEP 582 benefits our development workflow.","title":"Tips about developing a PDM plugin."},{"location":"plugin/#publish-your-plugin","text":"Now you have defined your plugin already, let's distribute it to PyPI. PDM's plugins are discovered by entry point types. Create an pdm.plugin entry point and point to your plugin callable (yeah, it doesn't need to be a function, any callable object can work): PEP 621 : 1 2 3 4 # pyproject.toml [project.entry-points.\"pdm.plugin\"] hello = \"my_plugin:hello_plugin\" Note that pdm.plugin is wrapped with double quotes to be regarded as a single key. setuptools : 1 2 3 4 5 6 7 # setup.py setup ( ... entry_points = { \"pdm.plugin\" : [ \"hello = my_plugin:hello_plugin\" ]} ... )","title":"Publish your plugin"},{"location":"plugin/#activate-the-plugin","text":"As plugins are loaded via entry points, they can be activated with no more steps than just installing the plugin. Assume your plugin is published as pdm-hello , and if you installed pdm via pipx : 1 $ pipx inject pdm pdm-hello Or if you installed pdm via homebrew : 1 $ $( brew --prefix pdm ) /libexec/bin/python -m pip install pdm-hello Otherwise, if you installed pdm with normal pip install : 1 $ pip install --user pdm-hello The core idea is you must install the plugin in the same site-package directory as pdm . Now type in pdm --help in the terminal, you will see the new added hello command and use it: 1 2 $ pdm hello Jack Hello, Jack","title":"Activate the plugin"},{"location":"project/","text":"Manage project # PDM can act as a PEP 517 build backend, to enable that, write the following lines in your pyproject.toml . If you used pdm init to create it for you, it should be done already. 1 2 3 [build-system] requires = [\"pdm-pep517\"] build-backend = \"pdm.pep517.api\" pip will read the backend settings to install or build a package. Choose a Python interpreter # If you have used pdm init , you must have already seen how PDM detects and selects the Python interpreter. After initialized, you can also change the settings by pdm use <python_version_or_path> . The argument can be either a version specifier of any length, or a relative or absolute path to the python interpreter, but remember the Python interpreter must be compatible with python_requires constraint in the project file. How python_requires controls the project # PDM respects the value of python_requires in the way that it tries to pick package candidates that can work on all python versions that python_requires contains. For example if python_requires is >=2.7 , PDM will try to find the latest version of foo , whose python_requires version range is a superset of >=2.7 . So, make sure you write python_requires properly if you don't want any outdated packages to be locked. Build distribution artifacts # 1 2 3 4 5 $ pdm build - Building sdist... - Built pdm-test-0.0.0.tar.gz - Building wheel... - Built pdm_test-0.0.0-py3-none-any.whl The artifacts can then be uploaded to PyPI by twine . Show the current Python environment # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ pdm info Python Interpreter: D:/Programs/Python/Python38/python.exe (3.8.0) Project Root: D:/Workspace/pdm [10:42] $ pdm info --env { \"implementation_name\": \"cpython\", \"implementation_version\": \"3.8.0\", \"os_name\": \"nt\", \"platform_machine\": \"AMD64\", \"platform_release\": \"10\", \"platform_system\": \"Windows\", \"platform_version\": \"10.0.18362\", \"python_full_version\": \"3.8.0\", \"platform_python_implementaiton\": \"CPython\", \"python_version\": \"3.8\", \"sys_platform\": \"win32\" } Configure the project # PDM's config command works just like git config , except that --list isn't needed to show configurations. Show the current configurations: 1 $ pdm config Get one single configuration: 1 $ pdm config pypi.url Change a configuration value and store in home configuration: 1 $ pdm config pypi.url \"https://testpypi.org/simple\" Change a configuration value and store in .pdm.toml : 1 $ pdm config --local pypi.url \"https://testpypi.org/simple\" The configuration files are searched in the following order: <PROJECT_ROOT>/.pdm.toml - The project configuration ~/.pdm/config.toml - The home configuration If -g/--global option is used, ~/.pdm/global-project/.pdm.toml will replace the first item. Manage global project # Sometimes users may want to keep track of the dependencies of global Python interpreter. It is easy to do it with PDM, via -g/--global option which is supported by most subcommands. If the option is passed, ~/.pdm/global-project will be used as the project directory, which is almost the same as normal project except that pyproject.toml will be created automatically for you and it doesn't support build features. The idea is taken from Haskell's stack . However, unlike stack , by default, PDM won't use global project automatically if a local project is not found. Users should pass -g/--global explicitly to activate it, since it is not very pleasing if packages go to a wrong place. To change this behavior, simply change the config auto_global to true . If you want global project to track another project file other than ~/.pdm/global-project , you can provide the project path following -g/--global . CAUTION Be careful with remove and sync --clean commands when global project is used, because it may remove packages installed in your system Python. Working with a virtualenv # Although PDM enforces PEP 582 by default, it also allows users to install packages into the virtualenv. It is controlled by the configuration item use_venv . When it is set to True PDM will use the virtualenv if: a virtualenv is already activated. any of venv , .venv , env is a valid virtualenv folder. Besides, when use-venv is on and the interpreter path given is a venv-like path, PDM will reuse that venv directory as well. Import project metadata from existing project files # If you are already other package manager tools like Pipenv or Poetry, it is easy to migrate to PDM. PDM provides import command so that you don't have to initialize the project manually, it now supports: Pipenv's Pipfile Poetry's section in pyproject.toml Flit's section in pyproject.toml requirements.txt format used by Pip Also, when you are executing pdm init or pdm install , PDM can auto-detect possible files to import if your PDM project has not been initialized yet. Export locked packages to alternative formats # You can also export pdm.lock to other formats, to ease the CI flow or image building process. Currently, only requirements.txt format is supported: 1 $ pdm export -o requirements.txt Hide the credentials from pyproject.toml # There are many times when we need to use sensitive information, such as login credentials for the PyPI server and username passwords for VCS repositories. We do not want to expose this information in pyproject.toml and upload it to git. PDM provides several methods to achieve this: User can give the auth information with environment variables which are encoded in the URL directly: 1 2 3 4 5 6 7 8 9 [[tool.pdm.source]] url = \"http://${INDEX_USER}:${INDEX_PASSWD}@test.pypi.org/simple\" name = \"test\" verify_ssl = false [project] dependencies = [ \"mypackage @ git+http://${VCS_USER}:${VCS_PASSWD}@test.git.com/test/mypackage.git@master\" ] Environment variables must be encoded in the form ${ENV_NAME} , other forms are not supported. Besides, only auth part will be expanded. If the credentials are not provided in the URL and a 401 response is received from the server, PDM will prompt for username and password when -v/--verbose is passed as command line argument, otherwise PDM will fail with an error telling users what happens. Users can then choose to store the credentials in the keyring after a confirmation question. A VCS repository applies the first method only, and an index server applies both methods. Available Configurations # Config Item Description Default Value Available in Project Env var cache_dir The root directory of cached files The default cache location on OS No auto_global Use global package implicitly if no local project is found False No PDM_AUTO_GLOBAL use_venv Install packages into the activated venv site packages instead of PEP 582 False Yes PDM_USE_VENV parallel_install Whether to perform installation and uninstallation in parallel True Yes PDM_PARALLEL_INSTALL python.path The Python interpreter path Yes PDM_PYTHON_PATH python.use_pyenv Use the pyenv interpreter True Yes pypi.url The URL of PyPI mirror Read index-url in pip.conf , or https://pypi.org/simple if not found Yes PDM_PYPI_URL pypi.verify_ssl Verify SSL certificate when query PyPI Read trusted-hosts in pip.conf , defaults to True Yes pypi.json_api Consult PyPI's JSON API for package metadata False Yes PDM_PYPI_JSON_API strategy.save Specify how to save versions when a package is added compatible (can be: exact , wildcard ) Yes strategy.update The default strategy for updating packages reuse (can be : eager ) Yes strategy.resolve_max_rounds Specify the max rounds of resolution process 1000 Yes PDM_RESOLVE_MAX_ROUNDS If the env var is set, the value will take precedence over what is saved in the config file. Run Scripts in Isolated Environment # With PDM, you can run arbitrary scripts or commands with local packages loaded: 1 $ pdm run flask run -p 54321 PDM also supports custom script shortcuts in the optional [tool.pdm.scripts] section of pyproject.toml . You can then run pdm run <shortcut_name> to invoke the script in the context of your PDM project. For example: 1 2 [tool.pdm.scripts] start_server = \"flask run -p 54321\" And then in your terminal: 1 2 $ pdm run start_server Flask server started at http://127.0.0.1:54321 Any extra arguments will be appended to the command: 1 2 $ pdm run start_server -h 0 .0.0.0 Flask server started at http://0.0.0.0:54321 PDM supports 3 types of scripts: Normal command # Plain text scripts are regarded as normal command, or you can explicitly specify it: 1 2 [tool.pdm.scripts] start_server = { cmd = \"flask run -p 54321\" } In some cases, such as when wanting to add comments between parameters, it might be more convinient to specify the command as an array instead of a string: 1 2 3 4 5 6 7 [tool.pdm.scripts] start_server = { cmd = [ \"flask\" , \"run\" , # Important comment here about always using port 54321 \"-p\" , \"54321\" ]} Shell script # Shell scripts can be used to run more shell-specific tasks, such as pipeline and output redirecting. This is basically run via subprocess.Popen() with shell=True : 1 2 [tool.pdm.scripts] filter_error = { shell = \"cat error.log|grep CRITICAL > critical.log\" } Call a Python function # The script can be also defined as calling a python function in the form <module_name>:<func_name> : 1 2 [tool.pdm.scripts] foobar = { call = \"foo_package.bar_module:main\" } The function can be supplied with literal arguments: 1 2 [tool.pdm.scripts] foobar = { call = \"foo_package.bar_module:main('dev')\" } Environment variables support # All environment variables set in the current shell can be seen by pdm run and will be expanded when executed. Besides, you can also define some fixed environment variables in your pyproject.toml : 1 2 3 [tool.pdm.scripts] start_server . cmd = \"flask run -p 54321\" start_server . env = { FOO = \"bar\" , FLASK_ENV = \"development\" } Note how we use TOML's syntax to define a compound dictionary. A dotenv file is also supported via env_file = \"<file_path>\" setting. For environment variables and/or dotenv file shared by all scripts, you can define env and env_file settings under a special key named _ of tool.pdm.scripts table: 1 2 3 4 [tool.pdm.scripts] _ . env_file = \".env\" start_server = \"flask run -p 54321\" migrate_db = \"flask db upgrade\" Show the list of scripts shortcuts # Use pdm run --list/-l to show the list of available script shortcuts: 1 2 3 4 5 6 $ pdm run --list Name Type Script Description ----------- ----- ---------------- ---------------------- test_cmd cmd flask db upgrade test_script call test_script:main call a python function test_shell shell echo $FOO shell command You can add an help option with the description of the script, and it will be displayed in the Description column in the above output. How we make PEP 582 packages available to the Python interpreter # Thanks to the site packages loading on Python startup. It is possible to patch the sys.path by executing the sitecustomize.py shipped with PDM. The interpreter can search the directories for the nearest __pypackage__ folder and append it to the sys.path variable.","title":"Manage project"},{"location":"project/#manage-project","text":"PDM can act as a PEP 517 build backend, to enable that, write the following lines in your pyproject.toml . If you used pdm init to create it for you, it should be done already. 1 2 3 [build-system] requires = [\"pdm-pep517\"] build-backend = \"pdm.pep517.api\" pip will read the backend settings to install or build a package.","title":"Manage project"},{"location":"project/#choose-a-python-interpreter","text":"If you have used pdm init , you must have already seen how PDM detects and selects the Python interpreter. After initialized, you can also change the settings by pdm use <python_version_or_path> . The argument can be either a version specifier of any length, or a relative or absolute path to the python interpreter, but remember the Python interpreter must be compatible with python_requires constraint in the project file.","title":"Choose a Python interpreter"},{"location":"project/#how-python_requires-controls-the-project","text":"PDM respects the value of python_requires in the way that it tries to pick package candidates that can work on all python versions that python_requires contains. For example if python_requires is >=2.7 , PDM will try to find the latest version of foo , whose python_requires version range is a superset of >=2.7 . So, make sure you write python_requires properly if you don't want any outdated packages to be locked.","title":"How python_requires controls the project"},{"location":"project/#build-distribution-artifacts","text":"1 2 3 4 5 $ pdm build - Building sdist... - Built pdm-test-0.0.0.tar.gz - Building wheel... - Built pdm_test-0.0.0-py3-none-any.whl The artifacts can then be uploaded to PyPI by twine .","title":"Build distribution artifacts"},{"location":"project/#show-the-current-python-environment","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ pdm info Python Interpreter: D:/Programs/Python/Python38/python.exe (3.8.0) Project Root: D:/Workspace/pdm [10:42] $ pdm info --env { \"implementation_name\": \"cpython\", \"implementation_version\": \"3.8.0\", \"os_name\": \"nt\", \"platform_machine\": \"AMD64\", \"platform_release\": \"10\", \"platform_system\": \"Windows\", \"platform_version\": \"10.0.18362\", \"python_full_version\": \"3.8.0\", \"platform_python_implementaiton\": \"CPython\", \"python_version\": \"3.8\", \"sys_platform\": \"win32\" }","title":"Show the current Python environment"},{"location":"project/#configure-the-project","text":"PDM's config command works just like git config , except that --list isn't needed to show configurations. Show the current configurations: 1 $ pdm config Get one single configuration: 1 $ pdm config pypi.url Change a configuration value and store in home configuration: 1 $ pdm config pypi.url \"https://testpypi.org/simple\" Change a configuration value and store in .pdm.toml : 1 $ pdm config --local pypi.url \"https://testpypi.org/simple\" The configuration files are searched in the following order: <PROJECT_ROOT>/.pdm.toml - The project configuration ~/.pdm/config.toml - The home configuration If -g/--global option is used, ~/.pdm/global-project/.pdm.toml will replace the first item.","title":"Configure the project"},{"location":"project/#manage-global-project","text":"Sometimes users may want to keep track of the dependencies of global Python interpreter. It is easy to do it with PDM, via -g/--global option which is supported by most subcommands. If the option is passed, ~/.pdm/global-project will be used as the project directory, which is almost the same as normal project except that pyproject.toml will be created automatically for you and it doesn't support build features. The idea is taken from Haskell's stack . However, unlike stack , by default, PDM won't use global project automatically if a local project is not found. Users should pass -g/--global explicitly to activate it, since it is not very pleasing if packages go to a wrong place. To change this behavior, simply change the config auto_global to true . If you want global project to track another project file other than ~/.pdm/global-project , you can provide the project path following -g/--global . CAUTION Be careful with remove and sync --clean commands when global project is used, because it may remove packages installed in your system Python.","title":"Manage global project"},{"location":"project/#working-with-a-virtualenv","text":"Although PDM enforces PEP 582 by default, it also allows users to install packages into the virtualenv. It is controlled by the configuration item use_venv . When it is set to True PDM will use the virtualenv if: a virtualenv is already activated. any of venv , .venv , env is a valid virtualenv folder. Besides, when use-venv is on and the interpreter path given is a venv-like path, PDM will reuse that venv directory as well.","title":"Working with a virtualenv"},{"location":"project/#import-project-metadata-from-existing-project-files","text":"If you are already other package manager tools like Pipenv or Poetry, it is easy to migrate to PDM. PDM provides import command so that you don't have to initialize the project manually, it now supports: Pipenv's Pipfile Poetry's section in pyproject.toml Flit's section in pyproject.toml requirements.txt format used by Pip Also, when you are executing pdm init or pdm install , PDM can auto-detect possible files to import if your PDM project has not been initialized yet.","title":"Import project metadata from existing project files"},{"location":"project/#export-locked-packages-to-alternative-formats","text":"You can also export pdm.lock to other formats, to ease the CI flow or image building process. Currently, only requirements.txt format is supported: 1 $ pdm export -o requirements.txt","title":"Export locked packages to alternative formats"},{"location":"project/#hide-the-credentials-from-pyprojecttoml","text":"There are many times when we need to use sensitive information, such as login credentials for the PyPI server and username passwords for VCS repositories. We do not want to expose this information in pyproject.toml and upload it to git. PDM provides several methods to achieve this: User can give the auth information with environment variables which are encoded in the URL directly: 1 2 3 4 5 6 7 8 9 [[tool.pdm.source]] url = \"http://${INDEX_USER}:${INDEX_PASSWD}@test.pypi.org/simple\" name = \"test\" verify_ssl = false [project] dependencies = [ \"mypackage @ git+http://${VCS_USER}:${VCS_PASSWD}@test.git.com/test/mypackage.git@master\" ] Environment variables must be encoded in the form ${ENV_NAME} , other forms are not supported. Besides, only auth part will be expanded. If the credentials are not provided in the URL and a 401 response is received from the server, PDM will prompt for username and password when -v/--verbose is passed as command line argument, otherwise PDM will fail with an error telling users what happens. Users can then choose to store the credentials in the keyring after a confirmation question. A VCS repository applies the first method only, and an index server applies both methods.","title":"Hide the credentials from pyproject.toml"},{"location":"project/#available-configurations","text":"Config Item Description Default Value Available in Project Env var cache_dir The root directory of cached files The default cache location on OS No auto_global Use global package implicitly if no local project is found False No PDM_AUTO_GLOBAL use_venv Install packages into the activated venv site packages instead of PEP 582 False Yes PDM_USE_VENV parallel_install Whether to perform installation and uninstallation in parallel True Yes PDM_PARALLEL_INSTALL python.path The Python interpreter path Yes PDM_PYTHON_PATH python.use_pyenv Use the pyenv interpreter True Yes pypi.url The URL of PyPI mirror Read index-url in pip.conf , or https://pypi.org/simple if not found Yes PDM_PYPI_URL pypi.verify_ssl Verify SSL certificate when query PyPI Read trusted-hosts in pip.conf , defaults to True Yes pypi.json_api Consult PyPI's JSON API for package metadata False Yes PDM_PYPI_JSON_API strategy.save Specify how to save versions when a package is added compatible (can be: exact , wildcard ) Yes strategy.update The default strategy for updating packages reuse (can be : eager ) Yes strategy.resolve_max_rounds Specify the max rounds of resolution process 1000 Yes PDM_RESOLVE_MAX_ROUNDS If the env var is set, the value will take precedence over what is saved in the config file.","title":"Available Configurations"},{"location":"project/#run-scripts-in-isolated-environment","text":"With PDM, you can run arbitrary scripts or commands with local packages loaded: 1 $ pdm run flask run -p 54321 PDM also supports custom script shortcuts in the optional [tool.pdm.scripts] section of pyproject.toml . You can then run pdm run <shortcut_name> to invoke the script in the context of your PDM project. For example: 1 2 [tool.pdm.scripts] start_server = \"flask run -p 54321\" And then in your terminal: 1 2 $ pdm run start_server Flask server started at http://127.0.0.1:54321 Any extra arguments will be appended to the command: 1 2 $ pdm run start_server -h 0 .0.0.0 Flask server started at http://0.0.0.0:54321 PDM supports 3 types of scripts:","title":"Run Scripts in Isolated Environment"},{"location":"project/#normal-command","text":"Plain text scripts are regarded as normal command, or you can explicitly specify it: 1 2 [tool.pdm.scripts] start_server = { cmd = \"flask run -p 54321\" } In some cases, such as when wanting to add comments between parameters, it might be more convinient to specify the command as an array instead of a string: 1 2 3 4 5 6 7 [tool.pdm.scripts] start_server = { cmd = [ \"flask\" , \"run\" , # Important comment here about always using port 54321 \"-p\" , \"54321\" ]}","title":"Normal command"},{"location":"project/#shell-script","text":"Shell scripts can be used to run more shell-specific tasks, such as pipeline and output redirecting. This is basically run via subprocess.Popen() with shell=True : 1 2 [tool.pdm.scripts] filter_error = { shell = \"cat error.log|grep CRITICAL > critical.log\" }","title":"Shell script"},{"location":"project/#call-a-python-function","text":"The script can be also defined as calling a python function in the form <module_name>:<func_name> : 1 2 [tool.pdm.scripts] foobar = { call = \"foo_package.bar_module:main\" } The function can be supplied with literal arguments: 1 2 [tool.pdm.scripts] foobar = { call = \"foo_package.bar_module:main('dev')\" }","title":"Call a Python function"},{"location":"project/#environment-variables-support","text":"All environment variables set in the current shell can be seen by pdm run and will be expanded when executed. Besides, you can also define some fixed environment variables in your pyproject.toml : 1 2 3 [tool.pdm.scripts] start_server . cmd = \"flask run -p 54321\" start_server . env = { FOO = \"bar\" , FLASK_ENV = \"development\" } Note how we use TOML's syntax to define a compound dictionary. A dotenv file is also supported via env_file = \"<file_path>\" setting. For environment variables and/or dotenv file shared by all scripts, you can define env and env_file settings under a special key named _ of tool.pdm.scripts table: 1 2 3 4 [tool.pdm.scripts] _ . env_file = \".env\" start_server = \"flask run -p 54321\" migrate_db = \"flask db upgrade\"","title":"Environment variables support"},{"location":"project/#show-the-list-of-scripts-shortcuts","text":"Use pdm run --list/-l to show the list of available script shortcuts: 1 2 3 4 5 6 $ pdm run --list Name Type Script Description ----------- ----- ---------------- ---------------------- test_cmd cmd flask db upgrade test_script call test_script:main call a python function test_shell shell echo $FOO shell command You can add an help option with the description of the script, and it will be displayed in the Description column in the above output.","title":"Show the list of scripts shortcuts"},{"location":"project/#how-we-make-pep-582-packages-available-to-the-python-interpreter","text":"Thanks to the site packages loading on Python startup. It is possible to patch the sys.path by executing the sitecustomize.py shipped with PDM. The interpreter can search the directories for the nearest __pypackage__ folder and append it to the sys.path variable.","title":"How we make PEP 582 packages available to the Python interpreter"},{"location":"pyproject/","text":"Project file syntax # Project metadata # PDM reads the project's metadata following the standardized format of PEP 621 . View the PEP for the detailed specification. In the following part of this document, metadata should be written under [project] table if not given explicitly. Determine the package version dynamically # You can specify a file source for version field like: version = {from = \"pdm/__init__.py\"} , in this form, the version will be read from the __version__ variable in that file. PDM can also read version from SCM tags. If you are using git or hg as the version control system, define the version as follows: 1 version = { use_scm = true } In either case, you MUST also include version in dynamic field, or the backend will raise an error: 1 dynamic = [\"version\"] Include and exclude package files # The way of specifying include and exclude files are simple, they are given as a list of glob patterns: 1 2 3 4 5 6 7 includes = [ \"**/*.json\" , \"mypackage/\" , ] excludes = [ \"mypackage/_temp/*\" ] If neither includes or excludes is given, PDM is also smart enough to include top level packages and all data files in them. Packages can also lie in src directory that PDM can find it. Select another package directory to look for packages # Similar to setuptools ' package_dir setting, one can specify another package directory, such as src , in pyproject.toml easily: 1 package-dir = \"src\" If no package directory is given, PDM can also recognize src as the package-dir implicitly if: src/__init__.py doesn't exist, meaning it is not a valid Python package, and There exist some packages under src/* . Implicit namespace packages # As specified in PEP 420 , a directory will be recognized as a namespace package if: <package>/__init__.py doesn't exist, and There exist normal packages and/or other namespace packages under <package>/* , and <package> is not specified as package-dir Dependency specification # The project.dependencies is an array of dependency specification strings following the PEP 440 and PEP 508 . Examples: 1 2 3 4 5 6 7 8 9 10 dependencies = [ # Named requirement \"requests\" , # Named requirement with version specifier \"flask >= 1.1.0\" , # Requirement with environment marker \"pywin32; sys_platform == 'win32'\" , # URL requirement \"pip @ https://github.com/pypa/pip.git@20.3.1\" ] Editable requirement # Beside of the normal dependency specifications, one can also have some packages installed in editable mode. The editable specification string format is the same as Pip's editable install mode . Examples: 1 2 3 4 5 dependencies = [ ..., \"-e path/to/SomeProject\", \"-e git+http://repo/my_project.git#egg=SomeProject\" ] About editable installation One can have editable installation and normal installation for the same package. The one that comes at last wins. However, editable dependencies WON'T be included in the metadata of the built artifacts since they are not valid PEP 508 strings. They only exist for development purpose. Optional dependencies # You can have some requirements optional, which is similar to setuptools ' extras_require parameter. 1 2 3 4 5 6 7 [project.optional-dependencies] socks = [ 'PySocks >= 1.5.6, != 1.5.7, < 2' ] tests = [ 'ddt >= 1.2.2, < 2' , 'pytest < 6' , 'mock >= 1.0.1, < 4; python_version < \"3.4\"' , ] To install a group of optional dependencies: 1 $ pdm install -s socks -s option can be given multiple times to include more than one groups. Development dependencies # You can have some development only dependencies, which is the same as package.json 's dev-dependencies field: 1 2 3 4 5 6 7 [project] dev-dependencies = [ \"pytest\" , \"flake8\" , \"black\" ] To install all of them: 1 $ pdm install -d Console scripts # The following content: 1 2 [project.scripts] mycli = \"mycli.__main__:main\" will be translated to setuptools style: 1 2 3 4 5 entry_points = { 'console_scripts' : [ 'mycli=mycli.__main__:main' ] } Also, [project.gui-scripts] will be translated to gui_scripts entry points group in setuptools style. Entry points # Other types of entry points are given by [project.entry-points.<type>] section, with the same format of [project.scripts] : 1 2 [project.entry-points.pytest11] myplugin = \"mypackage.plugin:pytest_plugin\" Build C extensions # Currently, building C extensions still relies on setuptools . You should write a python script which contains a function named build and accepts the parameter dictionary of setup() as the only argument. Update the dictionary with your ext_modules settings in the function. Here is an example taken from MarkupSafe : 1 2 3 4 5 6 7 # build.py from setuptools import Extension ext_modules = [ Extension ( \"markupsafe._speedups\" , [ \"src/markupsafe/_speedups.c\" ])] def build ( setup_kwargs ): setup_kwargs . update ( ext_modules = ext_modules ) Now, specify the build script path via build in the pyproject.toml : 1 2 3 # pyproject.toml [project] build = \"build.py\"","title":"Project file syntax"},{"location":"pyproject/#project-file-syntax","text":"","title":"Project file syntax"},{"location":"pyproject/#project-metadata","text":"PDM reads the project's metadata following the standardized format of PEP 621 . View the PEP for the detailed specification. In the following part of this document, metadata should be written under [project] table if not given explicitly.","title":"Project metadata"},{"location":"pyproject/#determine-the-package-version-dynamically","text":"You can specify a file source for version field like: version = {from = \"pdm/__init__.py\"} , in this form, the version will be read from the __version__ variable in that file. PDM can also read version from SCM tags. If you are using git or hg as the version control system, define the version as follows: 1 version = { use_scm = true } In either case, you MUST also include version in dynamic field, or the backend will raise an error: 1 dynamic = [\"version\"]","title":"Determine the package version dynamically"},{"location":"pyproject/#include-and-exclude-package-files","text":"The way of specifying include and exclude files are simple, they are given as a list of glob patterns: 1 2 3 4 5 6 7 includes = [ \"**/*.json\" , \"mypackage/\" , ] excludes = [ \"mypackage/_temp/*\" ] If neither includes or excludes is given, PDM is also smart enough to include top level packages and all data files in them. Packages can also lie in src directory that PDM can find it.","title":"Include and exclude package files"},{"location":"pyproject/#select-another-package-directory-to-look-for-packages","text":"Similar to setuptools ' package_dir setting, one can specify another package directory, such as src , in pyproject.toml easily: 1 package-dir = \"src\" If no package directory is given, PDM can also recognize src as the package-dir implicitly if: src/__init__.py doesn't exist, meaning it is not a valid Python package, and There exist some packages under src/* .","title":"Select another package directory to look for packages"},{"location":"pyproject/#implicit-namespace-packages","text":"As specified in PEP 420 , a directory will be recognized as a namespace package if: <package>/__init__.py doesn't exist, and There exist normal packages and/or other namespace packages under <package>/* , and <package> is not specified as package-dir","title":"Implicit namespace packages"},{"location":"pyproject/#dependency-specification","text":"The project.dependencies is an array of dependency specification strings following the PEP 440 and PEP 508 . Examples: 1 2 3 4 5 6 7 8 9 10 dependencies = [ # Named requirement \"requests\" , # Named requirement with version specifier \"flask >= 1.1.0\" , # Requirement with environment marker \"pywin32; sys_platform == 'win32'\" , # URL requirement \"pip @ https://github.com/pypa/pip.git@20.3.1\" ]","title":"Dependency specification"},{"location":"pyproject/#editable-requirement","text":"Beside of the normal dependency specifications, one can also have some packages installed in editable mode. The editable specification string format is the same as Pip's editable install mode . Examples: 1 2 3 4 5 dependencies = [ ..., \"-e path/to/SomeProject\", \"-e git+http://repo/my_project.git#egg=SomeProject\" ] About editable installation One can have editable installation and normal installation for the same package. The one that comes at last wins. However, editable dependencies WON'T be included in the metadata of the built artifacts since they are not valid PEP 508 strings. They only exist for development purpose.","title":"Editable requirement"},{"location":"pyproject/#optional-dependencies","text":"You can have some requirements optional, which is similar to setuptools ' extras_require parameter. 1 2 3 4 5 6 7 [project.optional-dependencies] socks = [ 'PySocks >= 1.5.6, != 1.5.7, < 2' ] tests = [ 'ddt >= 1.2.2, < 2' , 'pytest < 6' , 'mock >= 1.0.1, < 4; python_version < \"3.4\"' , ] To install a group of optional dependencies: 1 $ pdm install -s socks -s option can be given multiple times to include more than one groups.","title":"Optional dependencies"},{"location":"pyproject/#development-dependencies","text":"You can have some development only dependencies, which is the same as package.json 's dev-dependencies field: 1 2 3 4 5 6 7 [project] dev-dependencies = [ \"pytest\" , \"flake8\" , \"black\" ] To install all of them: 1 $ pdm install -d","title":"Development dependencies"},{"location":"pyproject/#console-scripts","text":"The following content: 1 2 [project.scripts] mycli = \"mycli.__main__:main\" will be translated to setuptools style: 1 2 3 4 5 entry_points = { 'console_scripts' : [ 'mycli=mycli.__main__:main' ] } Also, [project.gui-scripts] will be translated to gui_scripts entry points group in setuptools style.","title":"Console scripts"},{"location":"pyproject/#entry-points","text":"Other types of entry points are given by [project.entry-points.<type>] section, with the same format of [project.scripts] : 1 2 [project.entry-points.pytest11] myplugin = \"mypackage.plugin:pytest_plugin\"","title":"Entry points"},{"location":"pyproject/#build-c-extensions","text":"Currently, building C extensions still relies on setuptools . You should write a python script which contains a function named build and accepts the parameter dictionary of setup() as the only argument. Update the dictionary with your ext_modules settings in the function. Here is an example taken from MarkupSafe : 1 2 3 4 5 6 7 # build.py from setuptools import Extension ext_modules = [ Extension ( \"markupsafe._speedups\" , [ \"src/markupsafe/_speedups.c\" ])] def build ( setup_kwargs ): setup_kwargs . update ( ext_modules = ext_modules ) Now, specify the build script path via build in the pyproject.toml : 1 2 3 # pyproject.toml [project] build = \"build.py\"","title":"Build C extensions"}]}