{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # PDM is a modern Python package manager with PEP 582 support. It installs and manages packages in a similar way to npm that doesn't need to create a virtualenv at all! Feature highlights # PEP 582 local package installer and runner, no virtualenv involved at all. Simple and relatively fast dependency resolver, mainly for large binary distributions. A PEP 517 build backend. Installation # PDM requires Python 3.7+ to be installed. It works on multiple platforms including Windows, Linux and MacOS. Note There is no restriction about what Python version that your project is using but installing PDM itself needs Python 3.7+. Recommended installation method # To avoid messing up with the system Python environemnt, the most recommended way to install PDM is via pipx : $ pipx install pdm Other installation methods # Install PDM into user site with pip : $ pip install --user pdm Use with IDE # Now there are not built-in support or plugins for PEP 582 in most IDEs, you have to configure your tools manually. PDM will write and store project-wide configurations in .pdm.toml and you are recommended to add following lines in the .gitignore : .pdm.toml __pypackages__ / PyCharm # Mark __pypackages__/<major.minor>/lib as Sources Root. VSCode # Add following in the settings.json : { ... \"python.autoComplete.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ] }","title":"Introduction"},{"location":"#introduction","text":"PDM is a modern Python package manager with PEP 582 support. It installs and manages packages in a similar way to npm that doesn't need to create a virtualenv at all!","title":"Introduction"},{"location":"#feature-highlights","text":"PEP 582 local package installer and runner, no virtualenv involved at all. Simple and relatively fast dependency resolver, mainly for large binary distributions. A PEP 517 build backend.","title":"Feature highlights"},{"location":"#installation","text":"PDM requires Python 3.7+ to be installed. It works on multiple platforms including Windows, Linux and MacOS. Note There is no restriction about what Python version that your project is using but installing PDM itself needs Python 3.7+.","title":"Installation"},{"location":"#recommended-installation-method","text":"To avoid messing up with the system Python environemnt, the most recommended way to install PDM is via pipx : $ pipx install pdm","title":"Recommended installation method"},{"location":"#other-installation-methods","text":"Install PDM into user site with pip : $ pip install --user pdm","title":"Other installation methods"},{"location":"#use-with-ide","text":"Now there are not built-in support or plugins for PEP 582 in most IDEs, you have to configure your tools manually. PDM will write and store project-wide configurations in .pdm.toml and you are recommended to add following lines in the .gitignore : .pdm.toml __pypackages__ /","title":"Use with IDE"},{"location":"#pycharm","text":"Mark __pypackages__/<major.minor>/lib as Sources Root.","title":"PyCharm"},{"location":"#vscode","text":"Add following in the settings.json : { ... \"python.autoComplete.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ] }","title":"VSCode"},{"location":"changelog/","text":"Change Log # Release v0.4.0 (2020-03-10) # Features & Improvements # Global project support Add a new option -g/--global to manage global project. The default location is at ~/.pdm/global-project . Use the virtualenv interpreter when detected inside an activated venv. Add a new option -p/--project to select project root other than the default one. #30 Add a new command pdm config del to delete an existing config item. #71 Bug Fixes # Fix a URL parsing issue that username will be dropped in the SSH URL. #68 Improved Documentation # Add docs for global project and selecting project path. #30 Release v0.3.2 (2020-03-08) # Features & Improvements # Display all available Python interpreters if users don't give one in pdm init . #67 Bug Fixes # Regard 4.0 as infinite upper bound when checking subsetting. #66 Release v0.3.1 (2020-03-07) # Bug Fixes # Fix a bug that ImpossiblePySpec 's hash clashes with normal one. Release v0.3.0 (2020-02-28) # Features & Improvements # Add a new command pdm config to inspect configurations. #26 Add a new command pdm cache clear to clean caches. #63 Bug Fixes # Correctly show dependency graph when circular dependencies exist. #62 Improved Documentation # Write the initial documentation for PDM. #14 Release v0.2.6 (2020-02-25) # Features & Improvements # Improve the user interface of selecting Python interpreter. #54 Bug Fixes # Fix the wheel installer to correctly unparse the flags of console scripts. #56 Fix a bug that OS-dependent hashes are not saved. #57 Release v0.2.5 (2020-02-22) # Features & Improvements # Allow specifying Python interpreter via --python option in pdm init . #49 Set python_requires when initializing and defaults to >={current_version} . #50 Bug Fixes # Always consider wheels before tarballs; correctly merge markers from different parents. #47 Filter out incompatible wheels when installing. #48 Release v0.2.4 (2020-02-21) # Bug Fixes # Use the project local interpreter to build wheels. #43 Correctly merge Python specifiers when possible. #4 Release v0.2.3 (2020-02-21) # Bug Fixes # Fix a bug that editable build generates a malformed setup.py . Release v0.2.2 (2020-02-20) # Features & Improvements # Add a fancy greeting banner when user types pdm --help . #42 Bug Fixes # Fix the RECORD file in built wheel. #41 Dependencies # Add dependency python-cfonts to display banner. #42 Release v0.2.1 (2020-02-18) # Bug Fixes # Fix a bug that short python_version markers can't be parsed correctly. #38 Make _editable_intall.py compatible with Py2. Release v0.2.0 (2020-02-14) # Features & Improvements # New option: pdm list --graph to show a dependency graph of the working set. #10 New option: pdm update --unconstrained to ignore the version constraint of given packages. #13 Improve the error message when project is not initialized before running comands. #19 Pinned candidates in lock file are reused when relocking during pdm install . #33 Use the pyenv interperter value if pyenv is installed. #36 Introduce a new command pdm info to show project environment information. #9 Bug Fixes # Fix a bug that candidate hashes will be lost when reused. #11 Dependencies # Update pip to 20.0 , update pip_shims to 0.5.0 . #28 Miscellany # Add a script named setup_dev.py for the convenience to setup pdm for development. #29 Release v0.1.2 (2020-02-09) # Features # New command pdm use to switch python versions. #8 New option pdm list --graph to show a dependency graph. #10 Read metadata from lockfile when pinned candidate is reused. Release v0.1.1 (2020-02-07) # Features # Get version from the specified file. #6 Add column header to pdm list output. Release v0.1.0 (2020-02-07) # Bugfixes # Pass exit code to parent process in pdm run. Fix error handling for CLI. #19 Miscellany # Refactor the installer mocking for tests. Release v0.0.5 (2020-01-22) # Improvements # Ensure pypi index url is fetched in addition to the source settings. #3 Bugfixes # Fix an issue that leading \"c\"s are mistakenly stripped. #5 Fix an error with PEP 517 building. Release v0.0.4 (2020-01-22) # Improvements # Fix editable installation, now editable scripts can also be executed from outside! Content hash is calculated based on dependencies and sources, not other metadata. Bugfixes # Fix an issue that editable distributions can not be removed. Release v0.0.3 (2020-01-22) # Features # Add pdm init to bootstrap a project. Release v0.0.2 (2020-01-22) # Features # A complete functioning PEP 517 build backend. pdm builld command. Miscellany # Add a Chinese REAME Features # Add pdm init to bootstrap a project. Release v0.0.1 (2020-01-20) # Features # A dependency resolver that just works. A PEP 582 installer. PEP 440 version specifiers. PEP 508 environment markers. Running scripts with PEP 582 local packages. Console scripts are injected with local paths. A neet CLI. add, lock, list, update, remove commands. PEP 517 build backends. Continuous Integration.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#release-v040-2020-03-10","text":"","title":"Release v0.4.0 (2020-03-10)"},{"location":"changelog/#features-improvements","text":"Global project support Add a new option -g/--global to manage global project. The default location is at ~/.pdm/global-project . Use the virtualenv interpreter when detected inside an activated venv. Add a new option -p/--project to select project root other than the default one. #30 Add a new command pdm config del to delete an existing config item. #71","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes","text":"Fix a URL parsing issue that username will be dropped in the SSH URL. #68","title":"Bug Fixes"},{"location":"changelog/#improved-documentation","text":"Add docs for global project and selecting project path. #30","title":"Improved Documentation"},{"location":"changelog/#release-v032-2020-03-08","text":"","title":"Release v0.3.2 (2020-03-08)"},{"location":"changelog/#features-improvements_1","text":"Display all available Python interpreters if users don't give one in pdm init . #67","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_1","text":"Regard 4.0 as infinite upper bound when checking subsetting. #66","title":"Bug Fixes"},{"location":"changelog/#release-v031-2020-03-07","text":"","title":"Release v0.3.1 (2020-03-07)"},{"location":"changelog/#bug-fixes_2","text":"Fix a bug that ImpossiblePySpec 's hash clashes with normal one.","title":"Bug Fixes"},{"location":"changelog/#release-v030-2020-02-28","text":"","title":"Release v0.3.0 (2020-02-28)"},{"location":"changelog/#features-improvements_2","text":"Add a new command pdm config to inspect configurations. #26 Add a new command pdm cache clear to clean caches. #63","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_3","text":"Correctly show dependency graph when circular dependencies exist. #62","title":"Bug Fixes"},{"location":"changelog/#improved-documentation_1","text":"Write the initial documentation for PDM. #14","title":"Improved Documentation"},{"location":"changelog/#release-v026-2020-02-25","text":"","title":"Release v0.2.6 (2020-02-25)"},{"location":"changelog/#features-improvements_3","text":"Improve the user interface of selecting Python interpreter. #54","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_4","text":"Fix the wheel installer to correctly unparse the flags of console scripts. #56 Fix a bug that OS-dependent hashes are not saved. #57","title":"Bug Fixes"},{"location":"changelog/#release-v025-2020-02-22","text":"","title":"Release v0.2.5 (2020-02-22)"},{"location":"changelog/#features-improvements_4","text":"Allow specifying Python interpreter via --python option in pdm init . #49 Set python_requires when initializing and defaults to >={current_version} . #50","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_5","text":"Always consider wheels before tarballs; correctly merge markers from different parents. #47 Filter out incompatible wheels when installing. #48","title":"Bug Fixes"},{"location":"changelog/#release-v024-2020-02-21","text":"","title":"Release v0.2.4 (2020-02-21)"},{"location":"changelog/#bug-fixes_6","text":"Use the project local interpreter to build wheels. #43 Correctly merge Python specifiers when possible. #4","title":"Bug Fixes"},{"location":"changelog/#release-v023-2020-02-21","text":"","title":"Release v0.2.3 (2020-02-21)"},{"location":"changelog/#bug-fixes_7","text":"Fix a bug that editable build generates a malformed setup.py .","title":"Bug Fixes"},{"location":"changelog/#release-v022-2020-02-20","text":"","title":"Release v0.2.2 (2020-02-20)"},{"location":"changelog/#features-improvements_5","text":"Add a fancy greeting banner when user types pdm --help . #42","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_8","text":"Fix the RECORD file in built wheel. #41","title":"Bug Fixes"},{"location":"changelog/#dependencies","text":"Add dependency python-cfonts to display banner. #42","title":"Dependencies"},{"location":"changelog/#release-v021-2020-02-18","text":"","title":"Release v0.2.1 (2020-02-18)"},{"location":"changelog/#bug-fixes_9","text":"Fix a bug that short python_version markers can't be parsed correctly. #38 Make _editable_intall.py compatible with Py2.","title":"Bug Fixes"},{"location":"changelog/#release-v020-2020-02-14","text":"","title":"Release v0.2.0 (2020-02-14)"},{"location":"changelog/#features-improvements_6","text":"New option: pdm list --graph to show a dependency graph of the working set. #10 New option: pdm update --unconstrained to ignore the version constraint of given packages. #13 Improve the error message when project is not initialized before running comands. #19 Pinned candidates in lock file are reused when relocking during pdm install . #33 Use the pyenv interperter value if pyenv is installed. #36 Introduce a new command pdm info to show project environment information. #9","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_10","text":"Fix a bug that candidate hashes will be lost when reused. #11","title":"Bug Fixes"},{"location":"changelog/#dependencies_1","text":"Update pip to 20.0 , update pip_shims to 0.5.0 . #28","title":"Dependencies"},{"location":"changelog/#miscellany","text":"Add a script named setup_dev.py for the convenience to setup pdm for development. #29","title":"Miscellany"},{"location":"changelog/#release-v012-2020-02-09","text":"","title":"Release v0.1.2 (2020-02-09)"},{"location":"changelog/#features","text":"New command pdm use to switch python versions. #8 New option pdm list --graph to show a dependency graph. #10 Read metadata from lockfile when pinned candidate is reused.","title":"Features"},{"location":"changelog/#release-v011-2020-02-07","text":"","title":"Release v0.1.1 (2020-02-07)"},{"location":"changelog/#features_1","text":"Get version from the specified file. #6 Add column header to pdm list output.","title":"Features"},{"location":"changelog/#release-v010-2020-02-07","text":"","title":"Release v0.1.0 (2020-02-07)"},{"location":"changelog/#bugfixes","text":"Pass exit code to parent process in pdm run. Fix error handling for CLI. #19","title":"Bugfixes"},{"location":"changelog/#miscellany_1","text":"Refactor the installer mocking for tests.","title":"Miscellany"},{"location":"changelog/#release-v005-2020-01-22","text":"","title":"Release v0.0.5 (2020-01-22)"},{"location":"changelog/#improvements","text":"Ensure pypi index url is fetched in addition to the source settings. #3","title":"Improvements"},{"location":"changelog/#bugfixes_1","text":"Fix an issue that leading \"c\"s are mistakenly stripped. #5 Fix an error with PEP 517 building.","title":"Bugfixes"},{"location":"changelog/#release-v004-2020-01-22","text":"","title":"Release v0.0.4 (2020-01-22)"},{"location":"changelog/#improvements_1","text":"Fix editable installation, now editable scripts can also be executed from outside! Content hash is calculated based on dependencies and sources, not other metadata.","title":"Improvements"},{"location":"changelog/#bugfixes_2","text":"Fix an issue that editable distributions can not be removed.","title":"Bugfixes"},{"location":"changelog/#release-v003-2020-01-22","text":"","title":"Release v0.0.3 (2020-01-22)"},{"location":"changelog/#features_2","text":"Add pdm init to bootstrap a project.","title":"Features"},{"location":"changelog/#release-v002-2020-01-22","text":"","title":"Release v0.0.2 (2020-01-22)"},{"location":"changelog/#features_3","text":"A complete functioning PEP 517 build backend. pdm builld command.","title":"Features"},{"location":"changelog/#miscellany_2","text":"Add a Chinese REAME","title":"Miscellany"},{"location":"changelog/#features_4","text":"Add pdm init to bootstrap a project.","title":"Features"},{"location":"changelog/#release-v001-2020-01-20","text":"","title":"Release v0.0.1 (2020-01-20)"},{"location":"changelog/#features_5","text":"A dependency resolver that just works. A PEP 582 installer. PEP 440 version specifiers. PEP 508 environment markers. Running scripts with PEP 582 local packages. Console scripts are injected with local paths. A neet CLI. add, lock, list, update, remove commands. PEP 517 build backends. Continuous Integration.","title":"Features"},{"location":"contributing/","text":"Contributing to PDM # First off, thanks for taking the time to contribute! Contributions include but are not restricted to: Reporting bugs Contributing to code Writing tests Writing documents The following is a set of guidelines for contributing. A recommended flow of contributing to an Open Source project. # This guideline is for new beginners of OSS. If you are an experienced OSS developer, you can skip this section. First, fork this project to your own namespace using the fork button at the top right of the repository page. Clone the upstream repository to local: bash $ git clone https://github.com/frostming/pdm.git # Or if you prefer SSH clone: $ git clone git@github.com:frostming/pdm.git Add the fork as a new remote: bash $ git remote add fork https://github.com/yourname/pdm.git $ git fetch fork where fork is the remote name of the fork repository. ProTips: 1. Don't modify code on the master branch, the master branch should always keep in track with origin/master. To update master branch to date: bash $ git pull origin master # In rare cases that your local master branch diverges from the remote master: $ git fetch origin && git reset --hard master 2. Create a new branch based on the up-to-date master for new patches. 3. Create a Pull Request from that patch branch. Local development # To make sure the tests suites can run rightly, you need to install Git LFS , then $ git lfs install Then, you need to install base dependencies in a venv. Although PDM uses local package directory to install dependencies, venv is still needed to start up PDM at the first time: $ python setup_dev.py Now, all dependencies are installed into local __pypackages__ directory, which will be used for development after this point. The pdm executable located at __pypackages__/<VERSION>/bin can be run directly from outside, which is installed in editable mode, or you can use python -m pdm from inside the venv. Run tests # $ pdm run pytest tests The test suite is still simple and requires to be supplied, please help write more test cases. Code style # PDM uses pre-commit for linting, you need to install pre-commit first, then: $ pre-commit install $ pre-commit run --all-files PDM uses black coding style and isort for sorting import statements, if you are not following them, the CI will fail and your Pull Request will not be merged.","title":"Contributing"},{"location":"contributing/#contributing-to-pdm","text":"First off, thanks for taking the time to contribute! Contributions include but are not restricted to: Reporting bugs Contributing to code Writing tests Writing documents The following is a set of guidelines for contributing.","title":"Contributing to PDM"},{"location":"contributing/#a-recommended-flow-of-contributing-to-an-open-source-project","text":"This guideline is for new beginners of OSS. If you are an experienced OSS developer, you can skip this section. First, fork this project to your own namespace using the fork button at the top right of the repository page. Clone the upstream repository to local: bash $ git clone https://github.com/frostming/pdm.git # Or if you prefer SSH clone: $ git clone git@github.com:frostming/pdm.git Add the fork as a new remote: bash $ git remote add fork https://github.com/yourname/pdm.git $ git fetch fork where fork is the remote name of the fork repository. ProTips: 1. Don't modify code on the master branch, the master branch should always keep in track with origin/master. To update master branch to date: bash $ git pull origin master # In rare cases that your local master branch diverges from the remote master: $ git fetch origin && git reset --hard master 2. Create a new branch based on the up-to-date master for new patches. 3. Create a Pull Request from that patch branch.","title":"A recommended flow of contributing to an Open Source project."},{"location":"contributing/#local-development","text":"To make sure the tests suites can run rightly, you need to install Git LFS , then $ git lfs install Then, you need to install base dependencies in a venv. Although PDM uses local package directory to install dependencies, venv is still needed to start up PDM at the first time: $ python setup_dev.py Now, all dependencies are installed into local __pypackages__ directory, which will be used for development after this point. The pdm executable located at __pypackages__/<VERSION>/bin can be run directly from outside, which is installed in editable mode, or you can use python -m pdm from inside the venv.","title":"Local development"},{"location":"contributing/#run-tests","text":"$ pdm run pytest tests The test suite is still simple and requires to be supplied, please help write more test cases.","title":"Run tests"},{"location":"contributing/#code-style","text":"PDM uses pre-commit for linting, you need to install pre-commit first, then: $ pre-commit install $ pre-commit run --all-files PDM uses black coding style and isort for sorting import statements, if you are not following them, the CI will fail and your Pull Request will not be merged.","title":"Code style"},{"location":"dependency/","text":"Manage dependencies # PDM provides a bunch of handful commands to help manage your project and dependencies. The following examples are run on Ubuntu 18.04, a few changes must be done if you are using Windows. Initialize a project # $ mkdir pdm-test && cd pdm-test $ pdm init Answer several questions asked by PDM and a pyproject.toml will be created for you in the project root: [tool.pdm] name = \"pdm-test\" version = \"0.0.0\" description = \"\" author = \"Frost Ming <mianghong@gmail.com>\" license = \"MIT\" python_requires = \">=3.7\" [tool.pdm.dependencies] [tool.pdm.dev-dependencies] If pyproject.toml is already present, it will be updated with tool.pdm contents. For details of the meaning of each field in pyproject.toml , please refer to Project File . Add dependencies # $ pdm add requests $ pdm add -d pytest pdm add can be followed by one or several dependencies, and the dependency specification is described in PEP 508 . There are two groups of dependencies: packages will be added to [tool.pdm.dependencies] by default or [tool.pdm.dev-dependencies] if -d/--dev option is passed to the pdm add command. PDM also allows custom dependency groups by providing -s/--section <name> option, and the dependencies will apear in [tool.pdm.<name>-dependencies] in the project file, respectively. After that, dependencies and sub-dependencies will be resolved properly and installed for you, you can view pdm.lock to see the resolved result of all dependencies. Save version specifiers # If the package is given without a version specifier like pdm add requests . PDM provides three different behaviors of what version specifier is saved for the dependency, which is given by --save-<strategy> (Assume 2.21.0 is the latest version that can be found for the dependency): compatible : Save the compatible version specifier: >=2.21.0,<3.0.0 (default). exact : Save the exact version specifier: ==2.21.0 . wildcard : Don't constrain version and leave the specifier to be wildcard: * . Update existing dependencies # To update all dependencies in the lock file: $ pdm update To update the specified package(s): $ pdm update requests About update strategy # Similary, PDM also provides 2 different behaviors of updating dependencies and sub-dependencies\uff0c which is given by --update-<strategy> option: reuse : Keep all locked dependencies except for those given in the command line. eager : Try to lock a newer version of the packages in command line and their recursive sub-dependencies and keep other dependencies as they are. Remove existing dependencies # To remove existing dependencies from project file and the library directory: $ pdm remove requests Synchronize the project packages with lock file # There are two similar commands to do this job with a slight difference: pdm install will check the lock file and relock if it mismatch with project file, then install. pdm sync install dependencies in the lock file and will error out if it doesn't exist. Besides, pdm sync can also remove unneeded packages if --clean option is given. Show what packages are installed # Similar to pip list , you can list all packages installed in the packages directory: $ pdm list Or show a dependency graph by: $ pdm list --graph tempenv 0 .0.0 \u2514\u2500\u2500 click 7 .0 [ required: < 7 .0.0,> = 6 .7 ] black 19 .10b0 \u251c\u2500\u2500 appdirs 1 .4.3 [ required: Any ] \u251c\u2500\u2500 attrs 19 .3.0 [ required: > = 18 .1.0 ] \u251c\u2500\u2500 click 7 .0 [ required: > = 6 .5 ] \u251c\u2500\u2500 pathspec 0 .7.0 [ required: < 1 ,> = 0 .6 ] \u251c\u2500\u2500 regex 2020 .2.20 [ required: Any ] \u251c\u2500\u2500 toml 0 .10.0 [ required: > = 0 .9.4 ] \u2514\u2500\u2500 typed-ast 1 .4.1 [ required: > = 1 .4.0 ] bump2version 1 .0.0 Set PyPI index URL # You can specify a PyPI mirror URL by following commands: $ pdm config set pypi.url https://testpypi.org/simple By default, PDM will read the pip's configuration files to decide the PyPI URL, and fallback to https://pypi.org/simple if none is found. Add extra sources of packages # Sometimes your packages may exist on a private repository other than PyPI(and its mirrors). These sources should be preserved in pyproject.toml and shipped with the project in deployment. [[tool.pdm.source]] url = \"http://example.com/private/index\" verify_ssl = false # Don't verify SSL, it is required when you are using `HTTP` or the certificate is trusted. name = \"private\" Use the name name = \"pypi\" if you want to override the configurated PyPI index. Specify the index for one single dependency # You can specify which index should be consulted only for one single dependency: requests = { version = \"*\" , index = \"private\" }","title":"Manage dependencies"},{"location":"dependency/#manage-dependencies","text":"PDM provides a bunch of handful commands to help manage your project and dependencies. The following examples are run on Ubuntu 18.04, a few changes must be done if you are using Windows.","title":"Manage dependencies"},{"location":"dependency/#initialize-a-project","text":"$ mkdir pdm-test && cd pdm-test $ pdm init Answer several questions asked by PDM and a pyproject.toml will be created for you in the project root: [tool.pdm] name = \"pdm-test\" version = \"0.0.0\" description = \"\" author = \"Frost Ming <mianghong@gmail.com>\" license = \"MIT\" python_requires = \">=3.7\" [tool.pdm.dependencies] [tool.pdm.dev-dependencies] If pyproject.toml is already present, it will be updated with tool.pdm contents. For details of the meaning of each field in pyproject.toml , please refer to Project File .","title":"Initialize a project"},{"location":"dependency/#add-dependencies","text":"$ pdm add requests $ pdm add -d pytest pdm add can be followed by one or several dependencies, and the dependency specification is described in PEP 508 . There are two groups of dependencies: packages will be added to [tool.pdm.dependencies] by default or [tool.pdm.dev-dependencies] if -d/--dev option is passed to the pdm add command. PDM also allows custom dependency groups by providing -s/--section <name> option, and the dependencies will apear in [tool.pdm.<name>-dependencies] in the project file, respectively. After that, dependencies and sub-dependencies will be resolved properly and installed for you, you can view pdm.lock to see the resolved result of all dependencies.","title":"Add dependencies"},{"location":"dependency/#save-version-specifiers","text":"If the package is given without a version specifier like pdm add requests . PDM provides three different behaviors of what version specifier is saved for the dependency, which is given by --save-<strategy> (Assume 2.21.0 is the latest version that can be found for the dependency): compatible : Save the compatible version specifier: >=2.21.0,<3.0.0 (default). exact : Save the exact version specifier: ==2.21.0 . wildcard : Don't constrain version and leave the specifier to be wildcard: * .","title":"Save version specifiers"},{"location":"dependency/#update-existing-dependencies","text":"To update all dependencies in the lock file: $ pdm update To update the specified package(s): $ pdm update requests","title":"Update existing dependencies"},{"location":"dependency/#about-update-strategy","text":"Similary, PDM also provides 2 different behaviors of updating dependencies and sub-dependencies\uff0c which is given by --update-<strategy> option: reuse : Keep all locked dependencies except for those given in the command line. eager : Try to lock a newer version of the packages in command line and their recursive sub-dependencies and keep other dependencies as they are.","title":"About update strategy"},{"location":"dependency/#remove-existing-dependencies","text":"To remove existing dependencies from project file and the library directory: $ pdm remove requests","title":"Remove existing dependencies"},{"location":"dependency/#synchronize-the-project-packages-with-lock-file","text":"There are two similar commands to do this job with a slight difference: pdm install will check the lock file and relock if it mismatch with project file, then install. pdm sync install dependencies in the lock file and will error out if it doesn't exist. Besides, pdm sync can also remove unneeded packages if --clean option is given.","title":"Synchronize the project packages with lock file"},{"location":"dependency/#show-what-packages-are-installed","text":"Similar to pip list , you can list all packages installed in the packages directory: $ pdm list Or show a dependency graph by: $ pdm list --graph tempenv 0 .0.0 \u2514\u2500\u2500 click 7 .0 [ required: < 7 .0.0,> = 6 .7 ] black 19 .10b0 \u251c\u2500\u2500 appdirs 1 .4.3 [ required: Any ] \u251c\u2500\u2500 attrs 19 .3.0 [ required: > = 18 .1.0 ] \u251c\u2500\u2500 click 7 .0 [ required: > = 6 .5 ] \u251c\u2500\u2500 pathspec 0 .7.0 [ required: < 1 ,> = 0 .6 ] \u251c\u2500\u2500 regex 2020 .2.20 [ required: Any ] \u251c\u2500\u2500 toml 0 .10.0 [ required: > = 0 .9.4 ] \u2514\u2500\u2500 typed-ast 1 .4.1 [ required: > = 1 .4.0 ] bump2version 1 .0.0","title":"Show what packages are installed"},{"location":"dependency/#set-pypi-index-url","text":"You can specify a PyPI mirror URL by following commands: $ pdm config set pypi.url https://testpypi.org/simple By default, PDM will read the pip's configuration files to decide the PyPI URL, and fallback to https://pypi.org/simple if none is found.","title":"Set PyPI index URL"},{"location":"dependency/#add-extra-sources-of-packages","text":"Sometimes your packages may exist on a private repository other than PyPI(and its mirrors). These sources should be preserved in pyproject.toml and shipped with the project in deployment. [[tool.pdm.source]] url = \"http://example.com/private/index\" verify_ssl = false # Don't verify SSL, it is required when you are using `HTTP` or the certificate is trusted. name = \"private\" Use the name name = \"pypi\" if you want to override the configurated PyPI index.","title":"Add extra sources of packages"},{"location":"dependency/#specify-the-index-for-one-single-dependency","text":"You can specify which index should be consulted only for one single dependency: requests = { version = \"*\" , index = \"private\" }","title":"Specify the index for one single dependency"},{"location":"project/","text":"Manage project # PDM can act as a PEP 517 build backend, to enable that, write the following lines in your pyproject.toml . If you used pdm init to create it for you, it should be done already. [build-system] requires = [\"pdm\"] build-backend = \"pdm.builders.api\" pip will read the backend settings to install or build a package. About editable installation As described, PEP 517 doesn't provide a way to specify how to install a package in editable mode. So you can't install a PEP 517 package by pip install -e <path_or_url> . But PDM can install a \"PDM package\" in editable mode. Choose a Python interpreter # If you have used pdm init , you must have already seen how PDM detects and selects the Python interpreter. After initialized, you can also change the settings by pdm use <python_version_or_path> . The argument can be either a version specifier of any length, or a relative or absolute path to the python interpreter, but remember the Python interpreter must be compatible with python_requires constraint in the project file. How python_requires controls the project # PDM respects the value of python_requires in the way that it tries to pick package candidates that can work on all python versions that python_requires contains. For example if python_requires is >=2.7 , PDM will try to find the latest version of foo , whose python_requires version range is a superset of >=2.7 . So, make sure you write python_requires properly if you don't want any outdated packages to be locked. Build distribution artifacts # $ pdm build - Building sdist... - Built pdm-test-0.0.0.tar.gz - Building wheel... - Built pdm_test-0.0.0-py3-none-any.whl The artifacts can then be uploaded to PyPI by twine . Show the current Python environment # $ pdm info Python Interpreter: D:/Programs/Python/Python38/python.exe ( 3 .8.0 ) Project Root: D:/Workspace/pdm [ 10 :42 ] $ pdm info --env { \"implementation_name\" : \"cpython\" , \"implementation_version\" : \"3.8.0\" , \"os_name\" : \"nt\" , \"platform_machine\" : \"AMD64\" , \"platform_release\" : \"10\" , \"platform_system\" : \"Windows\" , \"platform_version\" : \"10.0.18362\" , \"python_full_version\" : \"3.8.0\" , \"platform_python_implementaiton\" : \"CPython\" , \"python_version\" : \"3.8\" , \"sys_platform\" : \"win32\" } Configrate the project # Show the configurations: $ pdm config Get one single configuration: $ pdm config get pypi.url Change a configuration value and store in home configuration: $ pdm config set pypi.url \"https://testpypi.org/simple\" Change a configuration value and store in .pdm.toml : $ pdm config set --local pypi.url \"https://testpypi.org/simple\" The configuration files are searched in the following order: <PROJECT_ROOT>/.pdm.toml - The project configuration ~/.pdm/config.toml - The home configuration If -g/--global option is used, ~/.pdm/global-project/.pdm.toml will replace the first item. Manage global project # Sometimes users may want to keep track of the dependencies of global Python interpreter. It is easy to do it with PDM, via -g/--global option which is supported by most subcommands. If the option is passed, ~/.pdm/global-project will be used as the project directory, which is almost the same as normal project except that pyproject.toml will be created automatically for you and it doesn't support build features. The idea is taken from Haskell's stack . However, unlike stack , PDM won't use global project automatically if a local project is not found. By default, users should pass -g/--global explicity to activate it, since it is not very pleasing if packages go to a wrong place. To change this behavior, simply change the config auto_global to true . NOTE Be careful with remove and sync --clean commands when global project is used. Because it may remove packages installed in your system Python. Choose another directory as project root # The default project root is cwd or the nearest parent(at a max depth of 3) with a valid pyproject.toml , or ~/.pdm/global-project if -g/--global flag is on. If you would like a different directory, pass it with -p/--project option. The project-level configuration will be changed, too. TIPS With the help of -g/--global and -p/--project options, you can gain a familiar experience of the old \"venv\" manners: inside an activated venv: pdm install -gp . will install all dependencies into the venv's library path. To make this happen, check the content of .pdm.toml and make sure python.path is correct.","title":"Manage project"},{"location":"project/#manage-project","text":"PDM can act as a PEP 517 build backend, to enable that, write the following lines in your pyproject.toml . If you used pdm init to create it for you, it should be done already. [build-system] requires = [\"pdm\"] build-backend = \"pdm.builders.api\" pip will read the backend settings to install or build a package. About editable installation As described, PEP 517 doesn't provide a way to specify how to install a package in editable mode. So you can't install a PEP 517 package by pip install -e <path_or_url> . But PDM can install a \"PDM package\" in editable mode.","title":"Manage project"},{"location":"project/#choose-a-python-interpreter","text":"If you have used pdm init , you must have already seen how PDM detects and selects the Python interpreter. After initialized, you can also change the settings by pdm use <python_version_or_path> . The argument can be either a version specifier of any length, or a relative or absolute path to the python interpreter, but remember the Python interpreter must be compatible with python_requires constraint in the project file.","title":"Choose a Python interpreter"},{"location":"project/#how-python_requires-controls-the-project","text":"PDM respects the value of python_requires in the way that it tries to pick package candidates that can work on all python versions that python_requires contains. For example if python_requires is >=2.7 , PDM will try to find the latest version of foo , whose python_requires version range is a superset of >=2.7 . So, make sure you write python_requires properly if you don't want any outdated packages to be locked.","title":"How python_requires controls the project"},{"location":"project/#build-distribution-artifacts","text":"$ pdm build - Building sdist... - Built pdm-test-0.0.0.tar.gz - Building wheel... - Built pdm_test-0.0.0-py3-none-any.whl The artifacts can then be uploaded to PyPI by twine .","title":"Build distribution artifacts"},{"location":"project/#show-the-current-python-environment","text":"$ pdm info Python Interpreter: D:/Programs/Python/Python38/python.exe ( 3 .8.0 ) Project Root: D:/Workspace/pdm [ 10 :42 ] $ pdm info --env { \"implementation_name\" : \"cpython\" , \"implementation_version\" : \"3.8.0\" , \"os_name\" : \"nt\" , \"platform_machine\" : \"AMD64\" , \"platform_release\" : \"10\" , \"platform_system\" : \"Windows\" , \"platform_version\" : \"10.0.18362\" , \"python_full_version\" : \"3.8.0\" , \"platform_python_implementaiton\" : \"CPython\" , \"python_version\" : \"3.8\" , \"sys_platform\" : \"win32\" }","title":"Show the current Python environment"},{"location":"project/#configrate-the-project","text":"Show the configurations: $ pdm config Get one single configuration: $ pdm config get pypi.url Change a configuration value and store in home configuration: $ pdm config set pypi.url \"https://testpypi.org/simple\" Change a configuration value and store in .pdm.toml : $ pdm config set --local pypi.url \"https://testpypi.org/simple\" The configuration files are searched in the following order: <PROJECT_ROOT>/.pdm.toml - The project configuration ~/.pdm/config.toml - The home configuration If -g/--global option is used, ~/.pdm/global-project/.pdm.toml will replace the first item.","title":"Configrate the project"},{"location":"project/#manage-global-project","text":"Sometimes users may want to keep track of the dependencies of global Python interpreter. It is easy to do it with PDM, via -g/--global option which is supported by most subcommands. If the option is passed, ~/.pdm/global-project will be used as the project directory, which is almost the same as normal project except that pyproject.toml will be created automatically for you and it doesn't support build features. The idea is taken from Haskell's stack . However, unlike stack , PDM won't use global project automatically if a local project is not found. By default, users should pass -g/--global explicity to activate it, since it is not very pleasing if packages go to a wrong place. To change this behavior, simply change the config auto_global to true . NOTE Be careful with remove and sync --clean commands when global project is used. Because it may remove packages installed in your system Python.","title":"Manage global project"},{"location":"project/#choose-another-directory-as-project-root","text":"The default project root is cwd or the nearest parent(at a max depth of 3) with a valid pyproject.toml , or ~/.pdm/global-project if -g/--global flag is on. If you would like a different directory, pass it with -p/--project option. The project-level configuration will be changed, too. TIPS With the help of -g/--global and -p/--project options, you can gain a familiar experience of the old \"venv\" manners: inside an activated venv: pdm install -gp . will install all dependencies into the venv's library path. To make this happen, check the content of .pdm.toml and make sure python.path is correct.","title":"Choose another directory as project root"},{"location":"pyproject/","text":"Project file syntax # Project metadata # There are several differences from the metadata of setuptools : readme is the file name of README file and PDM can derive the content type automatically. author and maintainer is a combination of name and email address in the form of Name <email> . Package version # You can specify a file source for version field like: version = {from = \"pdm/__init__.py\"} , in this form, the version will be read from the __version__ variable in that file. Include and exclude pacakge files # The way of specifying include and exclude files are simple, they are given as a list of glob patterns: includes = [ \"**/*.json\" , \"mypackage/\" , ] excludes = [ \"mypackage/_temp/*\" ] If neither includes or excludes is given, PDM is also smart enough to include top level packages and all data files in them. Packages can also lie in src directory that PDM can find it. Dependency specification # Named requirement # requests = \">=2.20.0\" pytz = \"*\" \"*\" means there is no constraint of what version should be used. Requirement given by file URL # pdm = { url = \"https://github.com/frostming/marko/archive/0.2.6.zip\" } Requirement given by local path # requests = { path = \"/path/to/requests\" } In this case, the path should be a directory on local machine. If you want to install a local file , use url = \"file:///path/to/file instead. VCS requirement # requests = { git = \"https://github.com/frostming/marko.git\" , ref = \"master\" } PDM supports all VCS schemes that are supported by pip . Editable requirement # Both VCS requirement and local directory requirement can have an editable = true flag, meaning it should be installed in editable mode. Requirement with markers # requests = { version = \">=2.20.0\" , marker = \"os_name!='nt'\" } Console scripts # The following content: [tool.pdm.cli] mycli = \"mycli.__main__:main\" will be translated to setuptools style: entry_points = { 'console_scripts' : [ 'mycli=mycli.__main__:main' ] } Entry points # Other types of entry points are given by [tool.pdm.entry_points.<type>] section, with the same format of [tool.pdm.cli] format: [tool.pdm.entry_points.pytest11] myplugin = \"mypackage.plugin:pytest_plugin\"","title":"Project file syntax"},{"location":"pyproject/#project-file-syntax","text":"","title":"Project file syntax"},{"location":"pyproject/#project-metadata","text":"There are several differences from the metadata of setuptools : readme is the file name of README file and PDM can derive the content type automatically. author and maintainer is a combination of name and email address in the form of Name <email> .","title":"Project metadata"},{"location":"pyproject/#package-version","text":"You can specify a file source for version field like: version = {from = \"pdm/__init__.py\"} , in this form, the version will be read from the __version__ variable in that file.","title":"Package version"},{"location":"pyproject/#include-and-exclude-pacakge-files","text":"The way of specifying include and exclude files are simple, they are given as a list of glob patterns: includes = [ \"**/*.json\" , \"mypackage/\" , ] excludes = [ \"mypackage/_temp/*\" ] If neither includes or excludes is given, PDM is also smart enough to include top level packages and all data files in them. Packages can also lie in src directory that PDM can find it.","title":"Include and exclude pacakge files"},{"location":"pyproject/#dependency-specification","text":"","title":"Dependency specification"},{"location":"pyproject/#named-requirement","text":"requests = \">=2.20.0\" pytz = \"*\" \"*\" means there is no constraint of what version should be used.","title":"Named requirement"},{"location":"pyproject/#requirement-given-by-file-url","text":"pdm = { url = \"https://github.com/frostming/marko/archive/0.2.6.zip\" }","title":"Requirement given by file URL"},{"location":"pyproject/#requirement-given-by-local-path","text":"requests = { path = \"/path/to/requests\" } In this case, the path should be a directory on local machine. If you want to install a local file , use url = \"file:///path/to/file instead.","title":"Requirement given by local path"},{"location":"pyproject/#vcs-requirement","text":"requests = { git = \"https://github.com/frostming/marko.git\" , ref = \"master\" } PDM supports all VCS schemes that are supported by pip .","title":"VCS requirement"},{"location":"pyproject/#editable-requirement","text":"Both VCS requirement and local directory requirement can have an editable = true flag, meaning it should be installed in editable mode.","title":"Editable requirement"},{"location":"pyproject/#requirement-with-markers","text":"requests = { version = \">=2.20.0\" , marker = \"os_name!='nt'\" }","title":"Requirement with markers"},{"location":"pyproject/#console-scripts","text":"The following content: [tool.pdm.cli] mycli = \"mycli.__main__:main\" will be translated to setuptools style: entry_points = { 'console_scripts' : [ 'mycli=mycli.__main__:main' ] }","title":"Console scripts"},{"location":"pyproject/#entry-points","text":"Other types of entry points are given by [tool.pdm.entry_points.<type>] section, with the same format of [tool.pdm.cli] format: [tool.pdm.entry_points.pytest11] myplugin = \"mypackage.plugin:pytest_plugin\"","title":"Entry points"}]}